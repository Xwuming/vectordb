syntax = "proto3";

package vectordb_rpc;

service VectorDB {
  rpc Ping (PingRequest) returns (PingReply) {}
  rpc Info (InfoRequest) returns (InfoReply) {}
  rpc CreateTable (CreateTableRequest) returns (CreateTableReply) {}
  rpc ShowTables (ShowTablesRequest) returns (ShowTablesReply) {}
  rpc Describe (DescribeRequest) returns (DescribeReply) {}
  rpc PutVec (PutVecRequest) returns (PutVecReply) {}
  rpc GetVec (GetVecRequest) returns (GetVecReply) {}
  rpc DistKey (DistKeyRequest) returns (DistKeyReply) {}
  rpc Keys (KeysRequest) returns (KeysReply) {}
  rpc BuildIndex (BuildIndexRequest) returns (BuildIndexReply) {}
  rpc GetKNN (GetKNNRequest) returns (GetKNNReply) {}
}

message KNNKey {
  string key = 1;
  int32 sequence = 2;
}

message KNNValue {
  string key = 1;
  float distance = 2;
}

message Int32 {
  int32 data = 1;
}

message GetKNNRequest {
  string table = 1;
  string key = 2;
  int32 limit = 3;
  string index_name = 4;
}

message VecDt {
  string key = 1;
  float distance = 2;
  string attach_value1 = 3;
  string attach_value2 = 4;
  string attach_value3 = 5;
}

message GetKNNReply {
  int32 code = 1;
  string msg = 2;
  repeated VecDt vecdts = 3;
}

message VecObj {
  string key = 1;
  Vec vec = 2;
  string attach_value1 = 3;
  string attach_value2 = 4;
  string attach_value3 = 5;
}

message Vec {
  repeated float data = 1;
}

message KeysRequest {
  string table = 1;
}

message KeysReply {
  int32 code = 1;
  string msg = 2;
  repeated string keys = 3;
}

message AnnoyParam {
  string distance_type = 1;
}

message KNNGraphParam {
  string distance_type = 1;
  int32 k = 2;
}

message BuildIndexRequest {
  string table = 1;
  string index_type = 2;
  AnnoyParam annoy_param = 3;
  KNNGraphParam knn_graph_param = 4;
}

message BuildIndexReply {
  int32 code = 1;
  string msg = 2;
}

message DistKeyRequest {
  string table = 1;
  string key1 = 2;
  string key2 = 3;
}

message DistKeyReply {
  int32 code = 1;
  string msg = 2;
  float distance = 3;	
}

message PutVecRequest {
  string table = 1;
  VecObj vec_obj = 2;
}

message PutVecReply {
  int32 code = 1;
  string msg = 2;
}

message GetVecRequest {
  string table = 1;
  string key = 2;
}

message GetVecReply {
  int32 code = 1;
  string msg = 2;
  VecObj vec_obj = 3;
}

message Replica {
  int32 id = 1;
  string name = 2;
  string table_name = 3;
  string partition_name = 4;
  string address = 5;
  string path = 6;
}

message Partition {
  int32 id = 1;
  string name = 2;
  string table_name = 3;
  int32 replica_num = 4;
  string path = 5;
  repeated Replica replicas = 6;
}

message Index {
  string index_name = 1;
  string index_type = 2;
};

message Table {
  string name = 1;
  int32 partition_num = 2;
  int32 replica_num = 3;
  string engine_type = 4;
  string path = 5;
  repeated Partition partitions = 6;
  repeated Index indices = 7;
  int32 dim = 8;
}

message TableNames {
  repeated string table_names = 1;
}

message PingRequest {
  string msg = 1;
}

message PingReply {
  string msg = 1;
}

message CreateTableRequest {
  string table_name = 1;
  int32 partition_num = 2;
  int32 replica_num = 3;
  int32 dim = 4;
}

message CreateTableReply {
  int32 code = 1;
  string msg = 2;
}

message ShowTablesRequest {
}

message ShowTablesReply {
  repeated string tables = 1;
}

message DescribeRequest {
  string name = 1;
}

message DescribeReply {
  int32 code = 1;
  string msg = 2;

  bool describe_table = 3;
  Table table = 4;

  bool describe_partition = 5;
  Partition partition = 6;

  bool describe_replica = 7;
  Replica replica = 8;
}

message InfoRequest {
}

message InfoReply {
  string msg = 1;
}

message VEngineMeta {
  int32 dim = 1;
  string replica_name = 2;
  repeated string index_names = 3; 
}



