#ifndef __VECTORDB_CONFIG_H__
#define __VECTORDB_CONFIG_H__

#include <getopt.h>
#include <cstdio>
#include <cstring>
#include <string>
#include <vector>
#include <memory>
#include "status.h"

namespace vectordb {

class HostAndPort {
  public:
    HostAndPort() = default;
    HostAndPort(const HostAndPort&) = default;

    HostAndPort(std::string host, int port)
        :host_(host), port_(port) {
    }

    std::string
    ToString() const {
        char buf[64];
        snprintf(buf, sizeof(buf), "%s:%d", host_.c_str(), port_);
        return std::string(buf);
    }

    std::string host_;
    int port_;
};

class Config {
  public:
    static Config&
    GetInstance() {
        static Config instance;
        return instance;
    }

    Config(const Config&) = delete;
    Config& operator=(const Config&) = delete;

    std::string DebugString();
    Status Load(int argc, char **argv);


    const std::string& storage_path() const {
        return storage_path_;
    }


  private:
    Config(); 

    ~Config();

    // intput:
    // hp = 127.0.0.1:38000
    // output:
    // host = 127.0.0.1
    // port = 38000
    void ParseHostPort(std::string &hp, std::string &host, int &port) {
        char* psave = nullptr;
        const char *d = ":";
        char *p;
        p = strtok_r((char*)hp.c_str(), d, &psave);
        host = std::string(p);
        p = strtok_r(nullptr, d, &psave);
        sscanf(p, "%d", &port);
    }

    HostAndPort address_;
    std::string storage_path_;
};

} // namespace vectordb

#endif
