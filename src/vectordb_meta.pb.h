// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vectordb_meta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vectordb_5fmeta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vectordb_5fmeta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vectordb_5fmeta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vectordb_5fmeta_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vectordb_5fmeta_2eproto;
namespace vectordb_meta {
class Partition;
class PartitionDefaultTypeInternal;
extern PartitionDefaultTypeInternal _Partition_default_instance_;
class Replica;
class ReplicaDefaultTypeInternal;
extern ReplicaDefaultTypeInternal _Replica_default_instance_;
class Table;
class TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
}  // namespace vectordb_meta
PROTOBUF_NAMESPACE_OPEN
template<> ::vectordb_meta::Partition* Arena::CreateMaybeMessage<::vectordb_meta::Partition>(Arena*);
template<> ::vectordb_meta::Replica* Arena::CreateMaybeMessage<::vectordb_meta::Replica>(Arena*);
template<> ::vectordb_meta::Table* Arena::CreateMaybeMessage<::vectordb_meta::Table>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vectordb_meta {

// ===================================================================

class Replica :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vectordb_meta.Replica) */ {
 public:
  Replica();
  virtual ~Replica();

  Replica(const Replica& from);
  Replica(Replica&& from) noexcept
    : Replica() {
    *this = ::std::move(from);
  }

  inline Replica& operator=(const Replica& from) {
    CopyFrom(from);
    return *this;
  }
  inline Replica& operator=(Replica&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Replica& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Replica* internal_default_instance() {
    return reinterpret_cast<const Replica*>(
               &_Replica_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Replica* other);
  friend void swap(Replica& a, Replica& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Replica* New() const final {
    return CreateMaybeMessage<Replica>(nullptr);
  }

  Replica* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Replica>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Replica& from);
  void MergeFrom(const Replica& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Replica* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vectordb_meta.Replica";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vectordb_5fmeta_2eproto);
    return ::descriptor_table_vectordb_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string table_name = 3;
  void clear_table_name();
  static const int kTableNameFieldNumber = 3;
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);

  // string partition_name = 4;
  void clear_partition_name();
  static const int kPartitionNameFieldNumber = 4;
  const std::string& partition_name() const;
  void set_partition_name(const std::string& value);
  void set_partition_name(std::string&& value);
  void set_partition_name(const char* value);
  void set_partition_name(const char* value, size_t size);
  std::string* mutable_partition_name();
  std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);

  // string address = 6;
  void clear_address();
  static const int kAddressFieldNumber = 6;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // string path = 7;
  void clear_path();
  static const int kPathFieldNumber = 7;
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 engine_type = 5;
  void clear_engine_type();
  static const int kEngineTypeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 engine_type() const;
  void set_engine_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:vectordb_meta.Replica)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 engine_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vectordb_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class Partition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vectordb_meta.Partition) */ {
 public:
  Partition();
  virtual ~Partition();

  Partition(const Partition& from);
  Partition(Partition&& from) noexcept
    : Partition() {
    *this = ::std::move(from);
  }

  inline Partition& operator=(const Partition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Partition& operator=(Partition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Partition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Partition* internal_default_instance() {
    return reinterpret_cast<const Partition*>(
               &_Partition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Partition* other);
  friend void swap(Partition& a, Partition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Partition* New() const final {
    return CreateMaybeMessage<Partition>(nullptr);
  }

  Partition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Partition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Partition& from);
  void MergeFrom(const Partition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Partition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vectordb_meta.Partition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vectordb_5fmeta_2eproto);
    return ::descriptor_table_vectordb_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vectordb_meta.Replica replicas = 7;
  int replicas_size() const;
  void clear_replicas();
  static const int kReplicasFieldNumber = 7;
  ::vectordb_meta::Replica* mutable_replicas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vectordb_meta::Replica >*
      mutable_replicas();
  const ::vectordb_meta::Replica& replicas(int index) const;
  ::vectordb_meta::Replica* add_replicas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vectordb_meta::Replica >&
      replicas() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string table_name = 3;
  void clear_table_name();
  static const int kTableNameFieldNumber = 3;
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);

  // string path = 6;
  void clear_path();
  static const int kPathFieldNumber = 6;
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 replica_num = 4;
  void clear_replica_num();
  static const int kReplicaNumFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 replica_num() const;
  void set_replica_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 engine_type = 5;
  void clear_engine_type();
  static const int kEngineTypeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 engine_type() const;
  void set_engine_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:vectordb_meta.Partition)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vectordb_meta::Replica > replicas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 replica_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 engine_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vectordb_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class Table :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vectordb_meta.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  inline Table& operator=(Table&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Table& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Table* other);
  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const final {
    return CreateMaybeMessage<Table>(nullptr);
  }

  Table* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Table>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vectordb_meta.Table";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vectordb_5fmeta_2eproto);
    return ::descriptor_table_vectordb_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vectordb_meta.Partition partitions = 6;
  int partitions_size() const;
  void clear_partitions();
  static const int kPartitionsFieldNumber = 6;
  ::vectordb_meta::Partition* mutable_partitions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vectordb_meta::Partition >*
      mutable_partitions();
  const ::vectordb_meta::Partition& partitions(int index) const;
  ::vectordb_meta::Partition* add_partitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vectordb_meta::Partition >&
      partitions() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string path = 5;
  void clear_path();
  static const int kPathFieldNumber = 5;
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // int32 partition_num = 2;
  void clear_partition_num();
  static const int kPartitionNumFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 partition_num() const;
  void set_partition_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 replica_num = 3;
  void clear_replica_num();
  static const int kReplicaNumFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 replica_num() const;
  void set_replica_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 engine_type = 4;
  void clear_engine_type();
  static const int kEngineTypeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 engine_type() const;
  void set_engine_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:vectordb_meta.Table)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vectordb_meta::Partition > partitions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 partition_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 replica_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 engine_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vectordb_5fmeta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Replica

// int32 id = 1;
inline void Replica::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Replica::id() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Replica.id)
  return id_;
}
inline void Replica::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:vectordb_meta.Replica.id)
}

// string name = 2;
inline void Replica::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Replica::name() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Replica.name)
  return name_.GetNoArena();
}
inline void Replica::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vectordb_meta.Replica.name)
}
inline void Replica::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vectordb_meta.Replica.name)
}
inline void Replica::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vectordb_meta.Replica.name)
}
inline void Replica::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vectordb_meta.Replica.name)
}
inline std::string* Replica::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vectordb_meta.Replica.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Replica::release_name() {
  // @@protoc_insertion_point(field_release:vectordb_meta.Replica.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Replica::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vectordb_meta.Replica.name)
}

// string table_name = 3;
inline void Replica::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Replica::table_name() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Replica.table_name)
  return table_name_.GetNoArena();
}
inline void Replica::set_table_name(const std::string& value) {
  
  table_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vectordb_meta.Replica.table_name)
}
inline void Replica::set_table_name(std::string&& value) {
  
  table_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vectordb_meta.Replica.table_name)
}
inline void Replica::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vectordb_meta.Replica.table_name)
}
inline void Replica::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vectordb_meta.Replica.table_name)
}
inline std::string* Replica::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:vectordb_meta.Replica.table_name)
  return table_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Replica::release_table_name() {
  // @@protoc_insertion_point(field_release:vectordb_meta.Replica.table_name)
  
  return table_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Replica::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:vectordb_meta.Replica.table_name)
}

// string partition_name = 4;
inline void Replica::clear_partition_name() {
  partition_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Replica::partition_name() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Replica.partition_name)
  return partition_name_.GetNoArena();
}
inline void Replica::set_partition_name(const std::string& value) {
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vectordb_meta.Replica.partition_name)
}
inline void Replica::set_partition_name(std::string&& value) {
  
  partition_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vectordb_meta.Replica.partition_name)
}
inline void Replica::set_partition_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vectordb_meta.Replica.partition_name)
}
inline void Replica::set_partition_name(const char* value, size_t size) {
  
  partition_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vectordb_meta.Replica.partition_name)
}
inline std::string* Replica::mutable_partition_name() {
  
  // @@protoc_insertion_point(field_mutable:vectordb_meta.Replica.partition_name)
  return partition_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Replica::release_partition_name() {
  // @@protoc_insertion_point(field_release:vectordb_meta.Replica.partition_name)
  
  return partition_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Replica::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  partition_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_name);
  // @@protoc_insertion_point(field_set_allocated:vectordb_meta.Replica.partition_name)
}

// int32 engine_type = 5;
inline void Replica::clear_engine_type() {
  engine_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Replica::engine_type() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Replica.engine_type)
  return engine_type_;
}
inline void Replica::set_engine_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  engine_type_ = value;
  // @@protoc_insertion_point(field_set:vectordb_meta.Replica.engine_type)
}

// string address = 6;
inline void Replica::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Replica::address() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Replica.address)
  return address_.GetNoArena();
}
inline void Replica::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vectordb_meta.Replica.address)
}
inline void Replica::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vectordb_meta.Replica.address)
}
inline void Replica::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vectordb_meta.Replica.address)
}
inline void Replica::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vectordb_meta.Replica.address)
}
inline std::string* Replica::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:vectordb_meta.Replica.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Replica::release_address() {
  // @@protoc_insertion_point(field_release:vectordb_meta.Replica.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Replica::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:vectordb_meta.Replica.address)
}

// string path = 7;
inline void Replica::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Replica::path() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Replica.path)
  return path_.GetNoArena();
}
inline void Replica::set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vectordb_meta.Replica.path)
}
inline void Replica::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vectordb_meta.Replica.path)
}
inline void Replica::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vectordb_meta.Replica.path)
}
inline void Replica::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vectordb_meta.Replica.path)
}
inline std::string* Replica::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:vectordb_meta.Replica.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Replica::release_path() {
  // @@protoc_insertion_point(field_release:vectordb_meta.Replica.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Replica::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:vectordb_meta.Replica.path)
}

// -------------------------------------------------------------------

// Partition

// int32 id = 1;
inline void Partition::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Partition::id() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Partition.id)
  return id_;
}
inline void Partition::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:vectordb_meta.Partition.id)
}

// string name = 2;
inline void Partition::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Partition::name() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Partition.name)
  return name_.GetNoArena();
}
inline void Partition::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vectordb_meta.Partition.name)
}
inline void Partition::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vectordb_meta.Partition.name)
}
inline void Partition::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vectordb_meta.Partition.name)
}
inline void Partition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vectordb_meta.Partition.name)
}
inline std::string* Partition::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vectordb_meta.Partition.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Partition::release_name() {
  // @@protoc_insertion_point(field_release:vectordb_meta.Partition.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Partition::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vectordb_meta.Partition.name)
}

// string table_name = 3;
inline void Partition::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Partition::table_name() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Partition.table_name)
  return table_name_.GetNoArena();
}
inline void Partition::set_table_name(const std::string& value) {
  
  table_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vectordb_meta.Partition.table_name)
}
inline void Partition::set_table_name(std::string&& value) {
  
  table_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vectordb_meta.Partition.table_name)
}
inline void Partition::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vectordb_meta.Partition.table_name)
}
inline void Partition::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vectordb_meta.Partition.table_name)
}
inline std::string* Partition::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:vectordb_meta.Partition.table_name)
  return table_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Partition::release_table_name() {
  // @@protoc_insertion_point(field_release:vectordb_meta.Partition.table_name)
  
  return table_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Partition::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:vectordb_meta.Partition.table_name)
}

// int32 replica_num = 4;
inline void Partition::clear_replica_num() {
  replica_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Partition::replica_num() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Partition.replica_num)
  return replica_num_;
}
inline void Partition::set_replica_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  replica_num_ = value;
  // @@protoc_insertion_point(field_set:vectordb_meta.Partition.replica_num)
}

// int32 engine_type = 5;
inline void Partition::clear_engine_type() {
  engine_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Partition::engine_type() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Partition.engine_type)
  return engine_type_;
}
inline void Partition::set_engine_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  engine_type_ = value;
  // @@protoc_insertion_point(field_set:vectordb_meta.Partition.engine_type)
}

// string path = 6;
inline void Partition::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Partition::path() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Partition.path)
  return path_.GetNoArena();
}
inline void Partition::set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vectordb_meta.Partition.path)
}
inline void Partition::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vectordb_meta.Partition.path)
}
inline void Partition::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vectordb_meta.Partition.path)
}
inline void Partition::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vectordb_meta.Partition.path)
}
inline std::string* Partition::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:vectordb_meta.Partition.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Partition::release_path() {
  // @@protoc_insertion_point(field_release:vectordb_meta.Partition.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Partition::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:vectordb_meta.Partition.path)
}

// repeated .vectordb_meta.Replica replicas = 7;
inline int Partition::replicas_size() const {
  return replicas_.size();
}
inline void Partition::clear_replicas() {
  replicas_.Clear();
}
inline ::vectordb_meta::Replica* Partition::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:vectordb_meta.Partition.replicas)
  return replicas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vectordb_meta::Replica >*
Partition::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:vectordb_meta.Partition.replicas)
  return &replicas_;
}
inline const ::vectordb_meta::Replica& Partition::replicas(int index) const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Partition.replicas)
  return replicas_.Get(index);
}
inline ::vectordb_meta::Replica* Partition::add_replicas() {
  // @@protoc_insertion_point(field_add:vectordb_meta.Partition.replicas)
  return replicas_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vectordb_meta::Replica >&
Partition::replicas() const {
  // @@protoc_insertion_point(field_list:vectordb_meta.Partition.replicas)
  return replicas_;
}

// -------------------------------------------------------------------

// Table

// string name = 1;
inline void Table::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Table::name() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Table.name)
  return name_.GetNoArena();
}
inline void Table::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vectordb_meta.Table.name)
}
inline void Table::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vectordb_meta.Table.name)
}
inline void Table::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vectordb_meta.Table.name)
}
inline void Table::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vectordb_meta.Table.name)
}
inline std::string* Table::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vectordb_meta.Table.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Table::release_name() {
  // @@protoc_insertion_point(field_release:vectordb_meta.Table.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vectordb_meta.Table.name)
}

// int32 partition_num = 2;
inline void Table::clear_partition_num() {
  partition_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Table::partition_num() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Table.partition_num)
  return partition_num_;
}
inline void Table::set_partition_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  partition_num_ = value;
  // @@protoc_insertion_point(field_set:vectordb_meta.Table.partition_num)
}

// int32 replica_num = 3;
inline void Table::clear_replica_num() {
  replica_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Table::replica_num() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Table.replica_num)
  return replica_num_;
}
inline void Table::set_replica_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  replica_num_ = value;
  // @@protoc_insertion_point(field_set:vectordb_meta.Table.replica_num)
}

// int32 engine_type = 4;
inline void Table::clear_engine_type() {
  engine_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Table::engine_type() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Table.engine_type)
  return engine_type_;
}
inline void Table::set_engine_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  engine_type_ = value;
  // @@protoc_insertion_point(field_set:vectordb_meta.Table.engine_type)
}

// string path = 5;
inline void Table::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Table::path() const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Table.path)
  return path_.GetNoArena();
}
inline void Table::set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vectordb_meta.Table.path)
}
inline void Table::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vectordb_meta.Table.path)
}
inline void Table::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vectordb_meta.Table.path)
}
inline void Table::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vectordb_meta.Table.path)
}
inline std::string* Table::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:vectordb_meta.Table.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Table::release_path() {
  // @@protoc_insertion_point(field_release:vectordb_meta.Table.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:vectordb_meta.Table.path)
}

// repeated .vectordb_meta.Partition partitions = 6;
inline int Table::partitions_size() const {
  return partitions_.size();
}
inline void Table::clear_partitions() {
  partitions_.Clear();
}
inline ::vectordb_meta::Partition* Table::mutable_partitions(int index) {
  // @@protoc_insertion_point(field_mutable:vectordb_meta.Table.partitions)
  return partitions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vectordb_meta::Partition >*
Table::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:vectordb_meta.Table.partitions)
  return &partitions_;
}
inline const ::vectordb_meta::Partition& Table::partitions(int index) const {
  // @@protoc_insertion_point(field_get:vectordb_meta.Table.partitions)
  return partitions_.Get(index);
}
inline ::vectordb_meta::Partition* Table::add_partitions() {
  // @@protoc_insertion_point(field_add:vectordb_meta.Table.partitions)
  return partitions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vectordb_meta::Partition >&
Table::partitions() const {
  // @@protoc_insertion_point(field_list:vectordb_meta.Table.partitions)
  return partitions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vectordb_meta

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vectordb_5fmeta_2eproto
