// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/vdb/vdb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_src_2fvdb_2fvdb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_src_2fvdb_2fvdb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_src_2fvdb_2fvdb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2fvdb_2fvdb_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_src_2fvdb_2fvdb_2eproto;
namespace vdb {
class DBParam;
struct DBParamDefaultTypeInternal;
extern DBParamDefaultTypeInternal _DBParam_default_instance_;
class FlatParam;
struct FlatParamDefaultTypeInternal;
extern FlatParamDefaultTypeInternal _FlatParam_default_instance_;
class HnswParam;
struct HnswParamDefaultTypeInternal;
extern HnswParamDefaultTypeInternal _HnswParam_default_instance_;
class Id;
struct IdDefaultTypeInternal;
extern IdDefaultTypeInternal _Id_default_instance_;
class IndexInfo;
struct IndexInfoDefaultTypeInternal;
extern IndexInfoDefaultTypeInternal _IndexInfo_default_instance_;
class IndexParam;
struct IndexParamDefaultTypeInternal;
extern IndexParamDefaultTypeInternal _IndexParam_default_instance_;
class TableInfo;
struct TableInfoDefaultTypeInternal;
extern TableInfoDefaultTypeInternal _TableInfo_default_instance_;
class TableParam;
struct TableParamDefaultTypeInternal;
extern TableParamDefaultTypeInternal _TableParam_default_instance_;
class Vec;
struct VecDefaultTypeInternal;
extern VecDefaultTypeInternal _Vec_default_instance_;
}  // namespace vdb
PROTOBUF_NAMESPACE_OPEN
template<> ::vdb::DBParam* Arena::CreateMaybeMessage<::vdb::DBParam>(Arena*);
template<> ::vdb::FlatParam* Arena::CreateMaybeMessage<::vdb::FlatParam>(Arena*);
template<> ::vdb::HnswParam* Arena::CreateMaybeMessage<::vdb::HnswParam>(Arena*);
template<> ::vdb::Id* Arena::CreateMaybeMessage<::vdb::Id>(Arena*);
template<> ::vdb::IndexInfo* Arena::CreateMaybeMessage<::vdb::IndexInfo>(Arena*);
template<> ::vdb::IndexParam* Arena::CreateMaybeMessage<::vdb::IndexParam>(Arena*);
template<> ::vdb::TableInfo* Arena::CreateMaybeMessage<::vdb::TableInfo>(Arena*);
template<> ::vdb::TableParam* Arena::CreateMaybeMessage<::vdb::TableParam>(Arena*);
template<> ::vdb::Vec* Arena::CreateMaybeMessage<::vdb::Vec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vdb {

// ===================================================================

class FlatParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vdb.FlatParam) */ {
 public:
  inline FlatParam() : FlatParam(nullptr) {}
  ~FlatParam() override;
  explicit PROTOBUF_CONSTEXPR FlatParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlatParam(const FlatParam& from);
  FlatParam(FlatParam&& from) noexcept
    : FlatParam() {
    *this = ::std::move(from);
  }

  inline FlatParam& operator=(const FlatParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlatParam& operator=(FlatParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlatParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlatParam* internal_default_instance() {
    return reinterpret_cast<const FlatParam*>(
               &_FlatParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FlatParam& a, FlatParam& b) {
    a.Swap(&b);
  }
  inline void Swap(FlatParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlatParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlatParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlatParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlatParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FlatParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlatParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vdb.FlatParam";
  }
  protected:
  explicit FlatParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 1,
    kMaxElementsFieldNumber = 2,
    kDistanceTypeFieldNumber = 3,
  };
  // int32 dim = 1;
  void clear_dim();
  int32_t dim() const;
  void set_dim(int32_t value);
  private:
  int32_t _internal_dim() const;
  void _internal_set_dim(int32_t value);
  public:

  // int32 max_elements = 2;
  void clear_max_elements();
  int32_t max_elements() const;
  void set_max_elements(int32_t value);
  private:
  int32_t _internal_max_elements() const;
  void _internal_set_max_elements(int32_t value);
  public:

  // int32 distance_type = 3;
  void clear_distance_type();
  int32_t distance_type() const;
  void set_distance_type(int32_t value);
  private:
  int32_t _internal_distance_type() const;
  void _internal_set_distance_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:vdb.FlatParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t dim_;
  int32_t max_elements_;
  int32_t distance_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fvdb_2fvdb_2eproto;
};
// -------------------------------------------------------------------

class HnswParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vdb.HnswParam) */ {
 public:
  inline HnswParam() : HnswParam(nullptr) {}
  ~HnswParam() override;
  explicit PROTOBUF_CONSTEXPR HnswParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HnswParam(const HnswParam& from);
  HnswParam(HnswParam&& from) noexcept
    : HnswParam() {
    *this = ::std::move(from);
  }

  inline HnswParam& operator=(const HnswParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline HnswParam& operator=(HnswParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HnswParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const HnswParam* internal_default_instance() {
    return reinterpret_cast<const HnswParam*>(
               &_HnswParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HnswParam& a, HnswParam& b) {
    a.Swap(&b);
  }
  inline void Swap(HnswParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HnswParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HnswParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HnswParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HnswParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HnswParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HnswParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vdb.HnswParam";
  }
  protected:
  explicit HnswParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 1,
    kMaxElementsFieldNumber = 2,
    kMFieldNumber = 3,
    kEfConstructionFieldNumber = 4,
    kDistanceTypeFieldNumber = 5,
  };
  // int32 dim = 1;
  void clear_dim();
  int32_t dim() const;
  void set_dim(int32_t value);
  private:
  int32_t _internal_dim() const;
  void _internal_set_dim(int32_t value);
  public:

  // int32 max_elements = 2;
  void clear_max_elements();
  int32_t max_elements() const;
  void set_max_elements(int32_t value);
  private:
  int32_t _internal_max_elements() const;
  void _internal_set_max_elements(int32_t value);
  public:

  // int32 M = 3;
  void clear_m();
  int32_t m() const;
  void set_m(int32_t value);
  private:
  int32_t _internal_m() const;
  void _internal_set_m(int32_t value);
  public:

  // int32 ef_construction = 4;
  void clear_ef_construction();
  int32_t ef_construction() const;
  void set_ef_construction(int32_t value);
  private:
  int32_t _internal_ef_construction() const;
  void _internal_set_ef_construction(int32_t value);
  public:

  // int32 distance_type = 5;
  void clear_distance_type();
  int32_t distance_type() const;
  void set_distance_type(int32_t value);
  private:
  int32_t _internal_distance_type() const;
  void _internal_set_distance_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:vdb.HnswParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t dim_;
  int32_t max_elements_;
  int32_t m_;
  int32_t ef_construction_;
  int32_t distance_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fvdb_2fvdb_2eproto;
};
// -------------------------------------------------------------------

class IndexInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vdb.IndexInfo) */ {
 public:
  inline IndexInfo() : IndexInfo(nullptr) {}
  ~IndexInfo() override;
  explicit PROTOBUF_CONSTEXPR IndexInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexInfo(const IndexInfo& from);
  IndexInfo(IndexInfo&& from) noexcept
    : IndexInfo() {
    *this = ::std::move(from);
  }

  inline IndexInfo& operator=(const IndexInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexInfo& operator=(IndexInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexInfo& default_instance() {
    return *internal_default_instance();
  }
  enum ParamCase {
    kFlatParam = 2,
    kHnswParam = 3,
    PARAM_NOT_SET = 0,
  };

  static inline const IndexInfo* internal_default_instance() {
    return reinterpret_cast<const IndexInfo*>(
               &_IndexInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IndexInfo& a, IndexInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IndexInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vdb.IndexInfo";
  }
  protected:
  explicit IndexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexTypeFieldNumber = 1,
    kFlatParamFieldNumber = 2,
    kHnswParamFieldNumber = 3,
  };
  // int32 index_type = 1;
  void clear_index_type();
  int32_t index_type() const;
  void set_index_type(int32_t value);
  private:
  int32_t _internal_index_type() const;
  void _internal_set_index_type(int32_t value);
  public:

  // .vdb.FlatParam flat_param = 2;
  bool has_flat_param() const;
  private:
  bool _internal_has_flat_param() const;
  public:
  void clear_flat_param();
  const ::vdb::FlatParam& flat_param() const;
  PROTOBUF_NODISCARD ::vdb::FlatParam* release_flat_param();
  ::vdb::FlatParam* mutable_flat_param();
  void set_allocated_flat_param(::vdb::FlatParam* flat_param);
  private:
  const ::vdb::FlatParam& _internal_flat_param() const;
  ::vdb::FlatParam* _internal_mutable_flat_param();
  public:
  void unsafe_arena_set_allocated_flat_param(
      ::vdb::FlatParam* flat_param);
  ::vdb::FlatParam* unsafe_arena_release_flat_param();

  // .vdb.HnswParam hnsw_param = 3;
  bool has_hnsw_param() const;
  private:
  bool _internal_has_hnsw_param() const;
  public:
  void clear_hnsw_param();
  const ::vdb::HnswParam& hnsw_param() const;
  PROTOBUF_NODISCARD ::vdb::HnswParam* release_hnsw_param();
  ::vdb::HnswParam* mutable_hnsw_param();
  void set_allocated_hnsw_param(::vdb::HnswParam* hnsw_param);
  private:
  const ::vdb::HnswParam& _internal_hnsw_param() const;
  ::vdb::HnswParam* _internal_mutable_hnsw_param();
  public:
  void unsafe_arena_set_allocated_hnsw_param(
      ::vdb::HnswParam* hnsw_param);
  ::vdb::HnswParam* unsafe_arena_release_hnsw_param();

  void clear_param();
  ParamCase param_case() const;
  // @@protoc_insertion_point(class_scope:vdb.IndexInfo)
 private:
  class _Internal;
  void set_has_flat_param();
  void set_has_hnsw_param();

  inline bool has_param() const;
  inline void clear_has_param();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t index_type_;
  union ParamUnion {
    constexpr ParamUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::vdb::FlatParam* flat_param_;
    ::vdb::HnswParam* hnsw_param_;
  } param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_src_2fvdb_2fvdb_2eproto;
};
// -------------------------------------------------------------------

class IndexParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vdb.IndexParam) */ {
 public:
  inline IndexParam() : IndexParam(nullptr) {}
  ~IndexParam() override;
  explicit PROTOBUF_CONSTEXPR IndexParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexParam(const IndexParam& from);
  IndexParam(IndexParam&& from) noexcept
    : IndexParam() {
    *this = ::std::move(from);
  }

  inline IndexParam& operator=(const IndexParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexParam& operator=(IndexParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexParam* internal_default_instance() {
    return reinterpret_cast<const IndexParam*>(
               &_IndexParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IndexParam& a, IndexParam& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IndexParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vdb.IndexParam";
  }
  protected:
  explicit IndexParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kIndexInfoFieldNumber = 4,
    kCreateTimeFieldNumber = 3,
    kIdFieldNumber = 2,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // .vdb.IndexInfo index_info = 4;
  bool has_index_info() const;
  private:
  bool _internal_has_index_info() const;
  public:
  void clear_index_info();
  const ::vdb::IndexInfo& index_info() const;
  PROTOBUF_NODISCARD ::vdb::IndexInfo* release_index_info();
  ::vdb::IndexInfo* mutable_index_info();
  void set_allocated_index_info(::vdb::IndexInfo* index_info);
  private:
  const ::vdb::IndexInfo& _internal_index_info() const;
  ::vdb::IndexInfo* _internal_mutable_index_info();
  public:
  void unsafe_arena_set_allocated_index_info(
      ::vdb::IndexInfo* index_info);
  ::vdb::IndexInfo* unsafe_arena_release_index_info();

  // int64 create_time = 3;
  void clear_create_time();
  int64_t create_time() const;
  void set_create_time(int64_t value);
  private:
  int64_t _internal_create_time() const;
  void _internal_set_create_time(int64_t value);
  public:

  // int32 id = 2;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:vdb.IndexParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::vdb::IndexInfo* index_info_;
  int64_t create_time_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fvdb_2fvdb_2eproto;
};
// -------------------------------------------------------------------

class TableInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vdb.TableInfo) */ {
 public:
  inline TableInfo() : TableInfo(nullptr) {}
  ~TableInfo() override;
  explicit PROTOBUF_CONSTEXPR TableInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableInfo(const TableInfo& from);
  TableInfo(TableInfo&& from) noexcept
    : TableInfo() {
    *this = ::std::move(from);
  }

  inline TableInfo& operator=(const TableInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableInfo& operator=(TableInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableInfo* internal_default_instance() {
    return reinterpret_cast<const TableInfo*>(
               &_TableInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TableInfo& a, TableInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TableInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TableInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vdb.TableInfo";
  }
  protected:
  explicit TableInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDefaultIndexInfoFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .vdb.IndexInfo default_index_info = 5;
  bool has_default_index_info() const;
  private:
  bool _internal_has_default_index_info() const;
  public:
  void clear_default_index_info();
  const ::vdb::IndexInfo& default_index_info() const;
  PROTOBUF_NODISCARD ::vdb::IndexInfo* release_default_index_info();
  ::vdb::IndexInfo* mutable_default_index_info();
  void set_allocated_default_index_info(::vdb::IndexInfo* default_index_info);
  private:
  const ::vdb::IndexInfo& _internal_default_index_info() const;
  ::vdb::IndexInfo* _internal_mutable_default_index_info();
  public:
  void unsafe_arena_set_allocated_default_index_info(
      ::vdb::IndexInfo* default_index_info);
  ::vdb::IndexInfo* unsafe_arena_release_default_index_info();

  // @@protoc_insertion_point(class_scope:vdb.TableInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::vdb::IndexInfo* default_index_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fvdb_2fvdb_2eproto;
};
// -------------------------------------------------------------------

class TableParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vdb.TableParam) */ {
 public:
  inline TableParam() : TableParam(nullptr) {}
  ~TableParam() override;
  explicit PROTOBUF_CONSTEXPR TableParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableParam(const TableParam& from);
  TableParam(TableParam&& from) noexcept
    : TableParam() {
    *this = ::std::move(from);
  }

  inline TableParam& operator=(const TableParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableParam& operator=(TableParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableParam* internal_default_instance() {
    return reinterpret_cast<const TableParam*>(
               &_TableParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TableParam& a, TableParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TableParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TableParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vdb.TableParam";
  }
  protected:
  explicit TableParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexesFieldNumber = 6,
    kPathFieldNumber = 1,
    kNameFieldNumber = 2,
    kDefaultIndexInfoFieldNumber = 5,
    kCreateTimeFieldNumber = 3,
    kDimFieldNumber = 4,
  };
  // repeated .vdb.IndexParam indexes = 6;
  int indexes_size() const;
  private:
  int _internal_indexes_size() const;
  public:
  void clear_indexes();
  ::vdb::IndexParam* mutable_indexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vdb::IndexParam >*
      mutable_indexes();
  private:
  const ::vdb::IndexParam& _internal_indexes(int index) const;
  ::vdb::IndexParam* _internal_add_indexes();
  public:
  const ::vdb::IndexParam& indexes(int index) const;
  ::vdb::IndexParam* add_indexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vdb::IndexParam >&
      indexes() const;

  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .vdb.IndexInfo default_index_info = 5;
  bool has_default_index_info() const;
  private:
  bool _internal_has_default_index_info() const;
  public:
  void clear_default_index_info();
  const ::vdb::IndexInfo& default_index_info() const;
  PROTOBUF_NODISCARD ::vdb::IndexInfo* release_default_index_info();
  ::vdb::IndexInfo* mutable_default_index_info();
  void set_allocated_default_index_info(::vdb::IndexInfo* default_index_info);
  private:
  const ::vdb::IndexInfo& _internal_default_index_info() const;
  ::vdb::IndexInfo* _internal_mutable_default_index_info();
  public:
  void unsafe_arena_set_allocated_default_index_info(
      ::vdb::IndexInfo* default_index_info);
  ::vdb::IndexInfo* unsafe_arena_release_default_index_info();

  // int64 create_time = 3;
  void clear_create_time();
  int64_t create_time() const;
  void set_create_time(int64_t value);
  private:
  int64_t _internal_create_time() const;
  void _internal_set_create_time(int64_t value);
  public:

  // int32 dim = 4;
  void clear_dim();
  int32_t dim() const;
  void set_dim(int32_t value);
  private:
  int32_t _internal_dim() const;
  void _internal_set_dim(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:vdb.TableParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vdb::IndexParam > indexes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::vdb::IndexInfo* default_index_info_;
  int64_t create_time_;
  int32_t dim_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fvdb_2fvdb_2eproto;
};
// -------------------------------------------------------------------

class DBParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vdb.DBParam) */ {
 public:
  inline DBParam() : DBParam(nullptr) {}
  ~DBParam() override;
  explicit PROTOBUF_CONSTEXPR DBParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBParam(const DBParam& from);
  DBParam(DBParam&& from) noexcept
    : DBParam() {
    *this = ::std::move(from);
  }

  inline DBParam& operator=(const DBParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBParam& operator=(DBParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBParam* internal_default_instance() {
    return reinterpret_cast<const DBParam*>(
               &_DBParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DBParam& a, DBParam& b) {
    a.Swap(&b);
  }
  inline void Swap(DBParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vdb.DBParam";
  }
  protected:
  explicit DBParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTablesFieldNumber = 4,
    kPathFieldNumber = 1,
    kNameFieldNumber = 2,
    kCreateTimeFieldNumber = 3,
  };
  // repeated .vdb.TableParam tables = 4;
  int tables_size() const;
  private:
  int _internal_tables_size() const;
  public:
  void clear_tables();
  ::vdb::TableParam* mutable_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vdb::TableParam >*
      mutable_tables();
  private:
  const ::vdb::TableParam& _internal_tables(int index) const;
  ::vdb::TableParam* _internal_add_tables();
  public:
  const ::vdb::TableParam& tables(int index) const;
  ::vdb::TableParam* add_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vdb::TableParam >&
      tables() const;

  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 create_time = 3;
  void clear_create_time();
  int64_t create_time() const;
  void set_create_time(int64_t value);
  private:
  int64_t _internal_create_time() const;
  void _internal_set_create_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:vdb.DBParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vdb::TableParam > tables_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int64_t create_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fvdb_2fvdb_2eproto;
};
// -------------------------------------------------------------------

class Vec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vdb.Vec) */ {
 public:
  inline Vec() : Vec(nullptr) {}
  ~Vec() override;
  explicit PROTOBUF_CONSTEXPR Vec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vec(const Vec& from);
  Vec(Vec&& from) noexcept
    : Vec() {
    *this = ::std::move(from);
  }

  inline Vec& operator=(const Vec& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec& operator=(Vec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vec& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vec* internal_default_instance() {
    return reinterpret_cast<const Vec*>(
               &_Vec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Vec& a, Vec& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vdb.Vec";
  }
  protected:
  explicit Vec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated float data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:vdb.Vec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fvdb_2fvdb_2eproto;
};
// -------------------------------------------------------------------

class Id final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vdb.Id) */ {
 public:
  inline Id() : Id(nullptr) {}
  ~Id() override;
  explicit PROTOBUF_CONSTEXPR Id(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Id(const Id& from);
  Id(Id&& from) noexcept
    : Id() {
    *this = ::std::move(from);
  }

  inline Id& operator=(const Id& from) {
    CopyFrom(from);
    return *this;
  }
  inline Id& operator=(Id&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Id& default_instance() {
    return *internal_default_instance();
  }
  static inline const Id* internal_default_instance() {
    return reinterpret_cast<const Id*>(
               &_Id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Id& a, Id& b) {
    a.Swap(&b);
  }
  inline void Swap(Id* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Id* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Id* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Id>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Id& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Id& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Id* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vdb.Id";
  }
  protected:
  explicit Id(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:vdb.Id)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fvdb_2fvdb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FlatParam

// int32 dim = 1;
inline void FlatParam::clear_dim() {
  dim_ = 0;
}
inline int32_t FlatParam::_internal_dim() const {
  return dim_;
}
inline int32_t FlatParam::dim() const {
  // @@protoc_insertion_point(field_get:vdb.FlatParam.dim)
  return _internal_dim();
}
inline void FlatParam::_internal_set_dim(int32_t value) {
  
  dim_ = value;
}
inline void FlatParam::set_dim(int32_t value) {
  _internal_set_dim(value);
  // @@protoc_insertion_point(field_set:vdb.FlatParam.dim)
}

// int32 max_elements = 2;
inline void FlatParam::clear_max_elements() {
  max_elements_ = 0;
}
inline int32_t FlatParam::_internal_max_elements() const {
  return max_elements_;
}
inline int32_t FlatParam::max_elements() const {
  // @@protoc_insertion_point(field_get:vdb.FlatParam.max_elements)
  return _internal_max_elements();
}
inline void FlatParam::_internal_set_max_elements(int32_t value) {
  
  max_elements_ = value;
}
inline void FlatParam::set_max_elements(int32_t value) {
  _internal_set_max_elements(value);
  // @@protoc_insertion_point(field_set:vdb.FlatParam.max_elements)
}

// int32 distance_type = 3;
inline void FlatParam::clear_distance_type() {
  distance_type_ = 0;
}
inline int32_t FlatParam::_internal_distance_type() const {
  return distance_type_;
}
inline int32_t FlatParam::distance_type() const {
  // @@protoc_insertion_point(field_get:vdb.FlatParam.distance_type)
  return _internal_distance_type();
}
inline void FlatParam::_internal_set_distance_type(int32_t value) {
  
  distance_type_ = value;
}
inline void FlatParam::set_distance_type(int32_t value) {
  _internal_set_distance_type(value);
  // @@protoc_insertion_point(field_set:vdb.FlatParam.distance_type)
}

// -------------------------------------------------------------------

// HnswParam

// int32 dim = 1;
inline void HnswParam::clear_dim() {
  dim_ = 0;
}
inline int32_t HnswParam::_internal_dim() const {
  return dim_;
}
inline int32_t HnswParam::dim() const {
  // @@protoc_insertion_point(field_get:vdb.HnswParam.dim)
  return _internal_dim();
}
inline void HnswParam::_internal_set_dim(int32_t value) {
  
  dim_ = value;
}
inline void HnswParam::set_dim(int32_t value) {
  _internal_set_dim(value);
  // @@protoc_insertion_point(field_set:vdb.HnswParam.dim)
}

// int32 max_elements = 2;
inline void HnswParam::clear_max_elements() {
  max_elements_ = 0;
}
inline int32_t HnswParam::_internal_max_elements() const {
  return max_elements_;
}
inline int32_t HnswParam::max_elements() const {
  // @@protoc_insertion_point(field_get:vdb.HnswParam.max_elements)
  return _internal_max_elements();
}
inline void HnswParam::_internal_set_max_elements(int32_t value) {
  
  max_elements_ = value;
}
inline void HnswParam::set_max_elements(int32_t value) {
  _internal_set_max_elements(value);
  // @@protoc_insertion_point(field_set:vdb.HnswParam.max_elements)
}

// int32 M = 3;
inline void HnswParam::clear_m() {
  m_ = 0;
}
inline int32_t HnswParam::_internal_m() const {
  return m_;
}
inline int32_t HnswParam::m() const {
  // @@protoc_insertion_point(field_get:vdb.HnswParam.M)
  return _internal_m();
}
inline void HnswParam::_internal_set_m(int32_t value) {
  
  m_ = value;
}
inline void HnswParam::set_m(int32_t value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:vdb.HnswParam.M)
}

// int32 ef_construction = 4;
inline void HnswParam::clear_ef_construction() {
  ef_construction_ = 0;
}
inline int32_t HnswParam::_internal_ef_construction() const {
  return ef_construction_;
}
inline int32_t HnswParam::ef_construction() const {
  // @@protoc_insertion_point(field_get:vdb.HnswParam.ef_construction)
  return _internal_ef_construction();
}
inline void HnswParam::_internal_set_ef_construction(int32_t value) {
  
  ef_construction_ = value;
}
inline void HnswParam::set_ef_construction(int32_t value) {
  _internal_set_ef_construction(value);
  // @@protoc_insertion_point(field_set:vdb.HnswParam.ef_construction)
}

// int32 distance_type = 5;
inline void HnswParam::clear_distance_type() {
  distance_type_ = 0;
}
inline int32_t HnswParam::_internal_distance_type() const {
  return distance_type_;
}
inline int32_t HnswParam::distance_type() const {
  // @@protoc_insertion_point(field_get:vdb.HnswParam.distance_type)
  return _internal_distance_type();
}
inline void HnswParam::_internal_set_distance_type(int32_t value) {
  
  distance_type_ = value;
}
inline void HnswParam::set_distance_type(int32_t value) {
  _internal_set_distance_type(value);
  // @@protoc_insertion_point(field_set:vdb.HnswParam.distance_type)
}

// -------------------------------------------------------------------

// IndexInfo

// int32 index_type = 1;
inline void IndexInfo::clear_index_type() {
  index_type_ = 0;
}
inline int32_t IndexInfo::_internal_index_type() const {
  return index_type_;
}
inline int32_t IndexInfo::index_type() const {
  // @@protoc_insertion_point(field_get:vdb.IndexInfo.index_type)
  return _internal_index_type();
}
inline void IndexInfo::_internal_set_index_type(int32_t value) {
  
  index_type_ = value;
}
inline void IndexInfo::set_index_type(int32_t value) {
  _internal_set_index_type(value);
  // @@protoc_insertion_point(field_set:vdb.IndexInfo.index_type)
}

// .vdb.FlatParam flat_param = 2;
inline bool IndexInfo::_internal_has_flat_param() const {
  return param_case() == kFlatParam;
}
inline bool IndexInfo::has_flat_param() const {
  return _internal_has_flat_param();
}
inline void IndexInfo::set_has_flat_param() {
  _oneof_case_[0] = kFlatParam;
}
inline void IndexInfo::clear_flat_param() {
  if (_internal_has_flat_param()) {
    if (GetArenaForAllocation() == nullptr) {
      delete param_.flat_param_;
    }
    clear_has_param();
  }
}
inline ::vdb::FlatParam* IndexInfo::release_flat_param() {
  // @@protoc_insertion_point(field_release:vdb.IndexInfo.flat_param)
  if (_internal_has_flat_param()) {
    clear_has_param();
    ::vdb::FlatParam* temp = param_.flat_param_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    param_.flat_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vdb::FlatParam& IndexInfo::_internal_flat_param() const {
  return _internal_has_flat_param()
      ? *param_.flat_param_
      : reinterpret_cast< ::vdb::FlatParam&>(::vdb::_FlatParam_default_instance_);
}
inline const ::vdb::FlatParam& IndexInfo::flat_param() const {
  // @@protoc_insertion_point(field_get:vdb.IndexInfo.flat_param)
  return _internal_flat_param();
}
inline ::vdb::FlatParam* IndexInfo::unsafe_arena_release_flat_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vdb.IndexInfo.flat_param)
  if (_internal_has_flat_param()) {
    clear_has_param();
    ::vdb::FlatParam* temp = param_.flat_param_;
    param_.flat_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IndexInfo::unsafe_arena_set_allocated_flat_param(::vdb::FlatParam* flat_param) {
  clear_param();
  if (flat_param) {
    set_has_flat_param();
    param_.flat_param_ = flat_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vdb.IndexInfo.flat_param)
}
inline ::vdb::FlatParam* IndexInfo::_internal_mutable_flat_param() {
  if (!_internal_has_flat_param()) {
    clear_param();
    set_has_flat_param();
    param_.flat_param_ = CreateMaybeMessage< ::vdb::FlatParam >(GetArenaForAllocation());
  }
  return param_.flat_param_;
}
inline ::vdb::FlatParam* IndexInfo::mutable_flat_param() {
  ::vdb::FlatParam* _msg = _internal_mutable_flat_param();
  // @@protoc_insertion_point(field_mutable:vdb.IndexInfo.flat_param)
  return _msg;
}

// .vdb.HnswParam hnsw_param = 3;
inline bool IndexInfo::_internal_has_hnsw_param() const {
  return param_case() == kHnswParam;
}
inline bool IndexInfo::has_hnsw_param() const {
  return _internal_has_hnsw_param();
}
inline void IndexInfo::set_has_hnsw_param() {
  _oneof_case_[0] = kHnswParam;
}
inline void IndexInfo::clear_hnsw_param() {
  if (_internal_has_hnsw_param()) {
    if (GetArenaForAllocation() == nullptr) {
      delete param_.hnsw_param_;
    }
    clear_has_param();
  }
}
inline ::vdb::HnswParam* IndexInfo::release_hnsw_param() {
  // @@protoc_insertion_point(field_release:vdb.IndexInfo.hnsw_param)
  if (_internal_has_hnsw_param()) {
    clear_has_param();
    ::vdb::HnswParam* temp = param_.hnsw_param_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    param_.hnsw_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vdb::HnswParam& IndexInfo::_internal_hnsw_param() const {
  return _internal_has_hnsw_param()
      ? *param_.hnsw_param_
      : reinterpret_cast< ::vdb::HnswParam&>(::vdb::_HnswParam_default_instance_);
}
inline const ::vdb::HnswParam& IndexInfo::hnsw_param() const {
  // @@protoc_insertion_point(field_get:vdb.IndexInfo.hnsw_param)
  return _internal_hnsw_param();
}
inline ::vdb::HnswParam* IndexInfo::unsafe_arena_release_hnsw_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vdb.IndexInfo.hnsw_param)
  if (_internal_has_hnsw_param()) {
    clear_has_param();
    ::vdb::HnswParam* temp = param_.hnsw_param_;
    param_.hnsw_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IndexInfo::unsafe_arena_set_allocated_hnsw_param(::vdb::HnswParam* hnsw_param) {
  clear_param();
  if (hnsw_param) {
    set_has_hnsw_param();
    param_.hnsw_param_ = hnsw_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vdb.IndexInfo.hnsw_param)
}
inline ::vdb::HnswParam* IndexInfo::_internal_mutable_hnsw_param() {
  if (!_internal_has_hnsw_param()) {
    clear_param();
    set_has_hnsw_param();
    param_.hnsw_param_ = CreateMaybeMessage< ::vdb::HnswParam >(GetArenaForAllocation());
  }
  return param_.hnsw_param_;
}
inline ::vdb::HnswParam* IndexInfo::mutable_hnsw_param() {
  ::vdb::HnswParam* _msg = _internal_mutable_hnsw_param();
  // @@protoc_insertion_point(field_mutable:vdb.IndexInfo.hnsw_param)
  return _msg;
}

inline bool IndexInfo::has_param() const {
  return param_case() != PARAM_NOT_SET;
}
inline void IndexInfo::clear_has_param() {
  _oneof_case_[0] = PARAM_NOT_SET;
}
inline IndexInfo::ParamCase IndexInfo::param_case() const {
  return IndexInfo::ParamCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// IndexParam

// string path = 1;
inline void IndexParam::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& IndexParam::path() const {
  // @@protoc_insertion_point(field_get:vdb.IndexParam.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexParam::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vdb.IndexParam.path)
}
inline std::string* IndexParam::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:vdb.IndexParam.path)
  return _s;
}
inline const std::string& IndexParam::_internal_path() const {
  return path_.Get();
}
inline void IndexParam::_internal_set_path(const std::string& value) {
  
  path_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexParam::_internal_mutable_path() {
  
  return path_.Mutable(GetArenaForAllocation());
}
inline std::string* IndexParam::release_path() {
  // @@protoc_insertion_point(field_release:vdb.IndexParam.path)
  return path_.Release();
}
inline void IndexParam::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault()) {
    path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vdb.IndexParam.path)
}

// int32 id = 2;
inline void IndexParam::clear_id() {
  id_ = 0;
}
inline int32_t IndexParam::_internal_id() const {
  return id_;
}
inline int32_t IndexParam::id() const {
  // @@protoc_insertion_point(field_get:vdb.IndexParam.id)
  return _internal_id();
}
inline void IndexParam::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void IndexParam::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vdb.IndexParam.id)
}

// int64 create_time = 3;
inline void IndexParam::clear_create_time() {
  create_time_ = int64_t{0};
}
inline int64_t IndexParam::_internal_create_time() const {
  return create_time_;
}
inline int64_t IndexParam::create_time() const {
  // @@protoc_insertion_point(field_get:vdb.IndexParam.create_time)
  return _internal_create_time();
}
inline void IndexParam::_internal_set_create_time(int64_t value) {
  
  create_time_ = value;
}
inline void IndexParam::set_create_time(int64_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:vdb.IndexParam.create_time)
}

// .vdb.IndexInfo index_info = 4;
inline bool IndexParam::_internal_has_index_info() const {
  return this != internal_default_instance() && index_info_ != nullptr;
}
inline bool IndexParam::has_index_info() const {
  return _internal_has_index_info();
}
inline void IndexParam::clear_index_info() {
  if (GetArenaForAllocation() == nullptr && index_info_ != nullptr) {
    delete index_info_;
  }
  index_info_ = nullptr;
}
inline const ::vdb::IndexInfo& IndexParam::_internal_index_info() const {
  const ::vdb::IndexInfo* p = index_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::vdb::IndexInfo&>(
      ::vdb::_IndexInfo_default_instance_);
}
inline const ::vdb::IndexInfo& IndexParam::index_info() const {
  // @@protoc_insertion_point(field_get:vdb.IndexParam.index_info)
  return _internal_index_info();
}
inline void IndexParam::unsafe_arena_set_allocated_index_info(
    ::vdb::IndexInfo* index_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(index_info_);
  }
  index_info_ = index_info;
  if (index_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vdb.IndexParam.index_info)
}
inline ::vdb::IndexInfo* IndexParam::release_index_info() {
  
  ::vdb::IndexInfo* temp = index_info_;
  index_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vdb::IndexInfo* IndexParam::unsafe_arena_release_index_info() {
  // @@protoc_insertion_point(field_release:vdb.IndexParam.index_info)
  
  ::vdb::IndexInfo* temp = index_info_;
  index_info_ = nullptr;
  return temp;
}
inline ::vdb::IndexInfo* IndexParam::_internal_mutable_index_info() {
  
  if (index_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::vdb::IndexInfo>(GetArenaForAllocation());
    index_info_ = p;
  }
  return index_info_;
}
inline ::vdb::IndexInfo* IndexParam::mutable_index_info() {
  ::vdb::IndexInfo* _msg = _internal_mutable_index_info();
  // @@protoc_insertion_point(field_mutable:vdb.IndexParam.index_info)
  return _msg;
}
inline void IndexParam::set_allocated_index_info(::vdb::IndexInfo* index_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete index_info_;
  }
  if (index_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(index_info);
    if (message_arena != submessage_arena) {
      index_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index_info, submessage_arena);
    }
    
  } else {
    
  }
  index_info_ = index_info;
  // @@protoc_insertion_point(field_set_allocated:vdb.IndexParam.index_info)
}

// -------------------------------------------------------------------

// TableInfo

// string name = 1;
inline void TableInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TableInfo::name() const {
  // @@protoc_insertion_point(field_get:vdb.TableInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vdb.TableInfo.name)
}
inline std::string* TableInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vdb.TableInfo.name)
  return _s;
}
inline const std::string& TableInfo::_internal_name() const {
  return name_.Get();
}
inline void TableInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* TableInfo::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* TableInfo::release_name() {
  // @@protoc_insertion_point(field_release:vdb.TableInfo.name)
  return name_.Release();
}
inline void TableInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vdb.TableInfo.name)
}

// .vdb.IndexInfo default_index_info = 5;
inline bool TableInfo::_internal_has_default_index_info() const {
  return this != internal_default_instance() && default_index_info_ != nullptr;
}
inline bool TableInfo::has_default_index_info() const {
  return _internal_has_default_index_info();
}
inline void TableInfo::clear_default_index_info() {
  if (GetArenaForAllocation() == nullptr && default_index_info_ != nullptr) {
    delete default_index_info_;
  }
  default_index_info_ = nullptr;
}
inline const ::vdb::IndexInfo& TableInfo::_internal_default_index_info() const {
  const ::vdb::IndexInfo* p = default_index_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::vdb::IndexInfo&>(
      ::vdb::_IndexInfo_default_instance_);
}
inline const ::vdb::IndexInfo& TableInfo::default_index_info() const {
  // @@protoc_insertion_point(field_get:vdb.TableInfo.default_index_info)
  return _internal_default_index_info();
}
inline void TableInfo::unsafe_arena_set_allocated_default_index_info(
    ::vdb::IndexInfo* default_index_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_index_info_);
  }
  default_index_info_ = default_index_info;
  if (default_index_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vdb.TableInfo.default_index_info)
}
inline ::vdb::IndexInfo* TableInfo::release_default_index_info() {
  
  ::vdb::IndexInfo* temp = default_index_info_;
  default_index_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vdb::IndexInfo* TableInfo::unsafe_arena_release_default_index_info() {
  // @@protoc_insertion_point(field_release:vdb.TableInfo.default_index_info)
  
  ::vdb::IndexInfo* temp = default_index_info_;
  default_index_info_ = nullptr;
  return temp;
}
inline ::vdb::IndexInfo* TableInfo::_internal_mutable_default_index_info() {
  
  if (default_index_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::vdb::IndexInfo>(GetArenaForAllocation());
    default_index_info_ = p;
  }
  return default_index_info_;
}
inline ::vdb::IndexInfo* TableInfo::mutable_default_index_info() {
  ::vdb::IndexInfo* _msg = _internal_mutable_default_index_info();
  // @@protoc_insertion_point(field_mutable:vdb.TableInfo.default_index_info)
  return _msg;
}
inline void TableInfo::set_allocated_default_index_info(::vdb::IndexInfo* default_index_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete default_index_info_;
  }
  if (default_index_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(default_index_info);
    if (message_arena != submessage_arena) {
      default_index_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_index_info, submessage_arena);
    }
    
  } else {
    
  }
  default_index_info_ = default_index_info;
  // @@protoc_insertion_point(field_set_allocated:vdb.TableInfo.default_index_info)
}

// -------------------------------------------------------------------

// TableParam

// string path = 1;
inline void TableParam::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& TableParam::path() const {
  // @@protoc_insertion_point(field_get:vdb.TableParam.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableParam::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vdb.TableParam.path)
}
inline std::string* TableParam::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:vdb.TableParam.path)
  return _s;
}
inline const std::string& TableParam::_internal_path() const {
  return path_.Get();
}
inline void TableParam::_internal_set_path(const std::string& value) {
  
  path_.Set(value, GetArenaForAllocation());
}
inline std::string* TableParam::_internal_mutable_path() {
  
  return path_.Mutable(GetArenaForAllocation());
}
inline std::string* TableParam::release_path() {
  // @@protoc_insertion_point(field_release:vdb.TableParam.path)
  return path_.Release();
}
inline void TableParam::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault()) {
    path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vdb.TableParam.path)
}

// string name = 2;
inline void TableParam::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TableParam::name() const {
  // @@protoc_insertion_point(field_get:vdb.TableParam.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableParam::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vdb.TableParam.name)
}
inline std::string* TableParam::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vdb.TableParam.name)
  return _s;
}
inline const std::string& TableParam::_internal_name() const {
  return name_.Get();
}
inline void TableParam::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* TableParam::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* TableParam::release_name() {
  // @@protoc_insertion_point(field_release:vdb.TableParam.name)
  return name_.Release();
}
inline void TableParam::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vdb.TableParam.name)
}

// int64 create_time = 3;
inline void TableParam::clear_create_time() {
  create_time_ = int64_t{0};
}
inline int64_t TableParam::_internal_create_time() const {
  return create_time_;
}
inline int64_t TableParam::create_time() const {
  // @@protoc_insertion_point(field_get:vdb.TableParam.create_time)
  return _internal_create_time();
}
inline void TableParam::_internal_set_create_time(int64_t value) {
  
  create_time_ = value;
}
inline void TableParam::set_create_time(int64_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:vdb.TableParam.create_time)
}

// int32 dim = 4;
inline void TableParam::clear_dim() {
  dim_ = 0;
}
inline int32_t TableParam::_internal_dim() const {
  return dim_;
}
inline int32_t TableParam::dim() const {
  // @@protoc_insertion_point(field_get:vdb.TableParam.dim)
  return _internal_dim();
}
inline void TableParam::_internal_set_dim(int32_t value) {
  
  dim_ = value;
}
inline void TableParam::set_dim(int32_t value) {
  _internal_set_dim(value);
  // @@protoc_insertion_point(field_set:vdb.TableParam.dim)
}

// .vdb.IndexInfo default_index_info = 5;
inline bool TableParam::_internal_has_default_index_info() const {
  return this != internal_default_instance() && default_index_info_ != nullptr;
}
inline bool TableParam::has_default_index_info() const {
  return _internal_has_default_index_info();
}
inline void TableParam::clear_default_index_info() {
  if (GetArenaForAllocation() == nullptr && default_index_info_ != nullptr) {
    delete default_index_info_;
  }
  default_index_info_ = nullptr;
}
inline const ::vdb::IndexInfo& TableParam::_internal_default_index_info() const {
  const ::vdb::IndexInfo* p = default_index_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::vdb::IndexInfo&>(
      ::vdb::_IndexInfo_default_instance_);
}
inline const ::vdb::IndexInfo& TableParam::default_index_info() const {
  // @@protoc_insertion_point(field_get:vdb.TableParam.default_index_info)
  return _internal_default_index_info();
}
inline void TableParam::unsafe_arena_set_allocated_default_index_info(
    ::vdb::IndexInfo* default_index_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_index_info_);
  }
  default_index_info_ = default_index_info;
  if (default_index_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vdb.TableParam.default_index_info)
}
inline ::vdb::IndexInfo* TableParam::release_default_index_info() {
  
  ::vdb::IndexInfo* temp = default_index_info_;
  default_index_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vdb::IndexInfo* TableParam::unsafe_arena_release_default_index_info() {
  // @@protoc_insertion_point(field_release:vdb.TableParam.default_index_info)
  
  ::vdb::IndexInfo* temp = default_index_info_;
  default_index_info_ = nullptr;
  return temp;
}
inline ::vdb::IndexInfo* TableParam::_internal_mutable_default_index_info() {
  
  if (default_index_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::vdb::IndexInfo>(GetArenaForAllocation());
    default_index_info_ = p;
  }
  return default_index_info_;
}
inline ::vdb::IndexInfo* TableParam::mutable_default_index_info() {
  ::vdb::IndexInfo* _msg = _internal_mutable_default_index_info();
  // @@protoc_insertion_point(field_mutable:vdb.TableParam.default_index_info)
  return _msg;
}
inline void TableParam::set_allocated_default_index_info(::vdb::IndexInfo* default_index_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete default_index_info_;
  }
  if (default_index_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(default_index_info);
    if (message_arena != submessage_arena) {
      default_index_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_index_info, submessage_arena);
    }
    
  } else {
    
  }
  default_index_info_ = default_index_info;
  // @@protoc_insertion_point(field_set_allocated:vdb.TableParam.default_index_info)
}

// repeated .vdb.IndexParam indexes = 6;
inline int TableParam::_internal_indexes_size() const {
  return indexes_.size();
}
inline int TableParam::indexes_size() const {
  return _internal_indexes_size();
}
inline void TableParam::clear_indexes() {
  indexes_.Clear();
}
inline ::vdb::IndexParam* TableParam::mutable_indexes(int index) {
  // @@protoc_insertion_point(field_mutable:vdb.TableParam.indexes)
  return indexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vdb::IndexParam >*
TableParam::mutable_indexes() {
  // @@protoc_insertion_point(field_mutable_list:vdb.TableParam.indexes)
  return &indexes_;
}
inline const ::vdb::IndexParam& TableParam::_internal_indexes(int index) const {
  return indexes_.Get(index);
}
inline const ::vdb::IndexParam& TableParam::indexes(int index) const {
  // @@protoc_insertion_point(field_get:vdb.TableParam.indexes)
  return _internal_indexes(index);
}
inline ::vdb::IndexParam* TableParam::_internal_add_indexes() {
  return indexes_.Add();
}
inline ::vdb::IndexParam* TableParam::add_indexes() {
  ::vdb::IndexParam* _add = _internal_add_indexes();
  // @@protoc_insertion_point(field_add:vdb.TableParam.indexes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vdb::IndexParam >&
TableParam::indexes() const {
  // @@protoc_insertion_point(field_list:vdb.TableParam.indexes)
  return indexes_;
}

// -------------------------------------------------------------------

// DBParam

// string path = 1;
inline void DBParam::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& DBParam::path() const {
  // @@protoc_insertion_point(field_get:vdb.DBParam.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBParam::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vdb.DBParam.path)
}
inline std::string* DBParam::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:vdb.DBParam.path)
  return _s;
}
inline const std::string& DBParam::_internal_path() const {
  return path_.Get();
}
inline void DBParam::_internal_set_path(const std::string& value) {
  
  path_.Set(value, GetArenaForAllocation());
}
inline std::string* DBParam::_internal_mutable_path() {
  
  return path_.Mutable(GetArenaForAllocation());
}
inline std::string* DBParam::release_path() {
  // @@protoc_insertion_point(field_release:vdb.DBParam.path)
  return path_.Release();
}
inline void DBParam::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault()) {
    path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vdb.DBParam.path)
}

// string name = 2;
inline void DBParam::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DBParam::name() const {
  // @@protoc_insertion_point(field_get:vdb.DBParam.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBParam::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vdb.DBParam.name)
}
inline std::string* DBParam::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vdb.DBParam.name)
  return _s;
}
inline const std::string& DBParam::_internal_name() const {
  return name_.Get();
}
inline void DBParam::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* DBParam::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* DBParam::release_name() {
  // @@protoc_insertion_point(field_release:vdb.DBParam.name)
  return name_.Release();
}
inline void DBParam::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vdb.DBParam.name)
}

// int64 create_time = 3;
inline void DBParam::clear_create_time() {
  create_time_ = int64_t{0};
}
inline int64_t DBParam::_internal_create_time() const {
  return create_time_;
}
inline int64_t DBParam::create_time() const {
  // @@protoc_insertion_point(field_get:vdb.DBParam.create_time)
  return _internal_create_time();
}
inline void DBParam::_internal_set_create_time(int64_t value) {
  
  create_time_ = value;
}
inline void DBParam::set_create_time(int64_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:vdb.DBParam.create_time)
}

// repeated .vdb.TableParam tables = 4;
inline int DBParam::_internal_tables_size() const {
  return tables_.size();
}
inline int DBParam::tables_size() const {
  return _internal_tables_size();
}
inline void DBParam::clear_tables() {
  tables_.Clear();
}
inline ::vdb::TableParam* DBParam::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:vdb.DBParam.tables)
  return tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vdb::TableParam >*
DBParam::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:vdb.DBParam.tables)
  return &tables_;
}
inline const ::vdb::TableParam& DBParam::_internal_tables(int index) const {
  return tables_.Get(index);
}
inline const ::vdb::TableParam& DBParam::tables(int index) const {
  // @@protoc_insertion_point(field_get:vdb.DBParam.tables)
  return _internal_tables(index);
}
inline ::vdb::TableParam* DBParam::_internal_add_tables() {
  return tables_.Add();
}
inline ::vdb::TableParam* DBParam::add_tables() {
  ::vdb::TableParam* _add = _internal_add_tables();
  // @@protoc_insertion_point(field_add:vdb.DBParam.tables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vdb::TableParam >&
DBParam::tables() const {
  // @@protoc_insertion_point(field_list:vdb.DBParam.tables)
  return tables_;
}

// -------------------------------------------------------------------

// Vec

// repeated float data = 1;
inline int Vec::_internal_data_size() const {
  return data_.size();
}
inline int Vec::data_size() const {
  return _internal_data_size();
}
inline void Vec::clear_data() {
  data_.Clear();
}
inline float Vec::_internal_data(int index) const {
  return data_.Get(index);
}
inline float Vec::data(int index) const {
  // @@protoc_insertion_point(field_get:vdb.Vec.data)
  return _internal_data(index);
}
inline void Vec::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:vdb.Vec.data)
}
inline void Vec::_internal_add_data(float value) {
  data_.Add(value);
}
inline void Vec::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:vdb.Vec.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Vec::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Vec::data() const {
  // @@protoc_insertion_point(field_list:vdb.Vec.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Vec::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Vec::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:vdb.Vec.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// Id

// int64 id = 1;
inline void Id::clear_id() {
  id_ = int64_t{0};
}
inline int64_t Id::_internal_id() const {
  return id_;
}
inline int64_t Id::id() const {
  // @@protoc_insertion_point(field_get:vdb.Id.id)
  return _internal_id();
}
inline void Id::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void Id::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vdb.Id.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vdb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_src_2fvdb_2fvdb_2eproto
