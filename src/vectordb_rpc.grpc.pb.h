// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vectordb_rpc.proto
#ifndef GRPC_vectordb_5frpc_2eproto__INCLUDED
#define GRPC_vectordb_5frpc_2eproto__INCLUDED

#include "vectordb_rpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace vectordb_rpc {

class VectorDB final {
 public:
  static constexpr char const* service_full_name() {
    return "vectordb_rpc.VectorDB";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest& request, ::vectordb_rpc::PingReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::PingReply>> AsyncPing(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::PingReply>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::PingReply>> PrepareAsyncPing(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::PingReply>>(PrepareAsyncPingRaw(context, request, cq));
    }
    virtual ::grpc::Status Info(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest& request, ::vectordb_rpc::InfoReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::InfoReply>> AsyncInfo(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::InfoReply>>(AsyncInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::InfoReply>> PrepareAsyncInfo(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::InfoReply>>(PrepareAsyncInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateTable(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest& request, ::vectordb_rpc::CreateTableReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::CreateTableReply>> AsyncCreateTable(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::CreateTableReply>>(AsyncCreateTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::CreateTableReply>> PrepareAsyncCreateTable(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::CreateTableReply>>(PrepareAsyncCreateTableRaw(context, request, cq));
    }
    virtual ::grpc::Status ShowTables(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest& request, ::vectordb_rpc::ShowTablesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::ShowTablesReply>> AsyncShowTables(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::ShowTablesReply>>(AsyncShowTablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::ShowTablesReply>> PrepareAsyncShowTables(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::ShowTablesReply>>(PrepareAsyncShowTablesRaw(context, request, cq));
    }
    virtual ::grpc::Status Describe(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest& request, ::vectordb_rpc::DescribeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::DescribeReply>> AsyncDescribe(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::DescribeReply>>(AsyncDescribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::DescribeReply>> PrepareAsyncDescribe(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::DescribeReply>>(PrepareAsyncDescribeRaw(context, request, cq));
    }
    virtual ::grpc::Status PutVec(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest& request, ::vectordb_rpc::PutVecReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::PutVecReply>> AsyncPutVec(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::PutVecReply>>(AsyncPutVecRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::PutVecReply>> PrepareAsyncPutVec(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::PutVecReply>>(PrepareAsyncPutVecRaw(context, request, cq));
    }
    virtual ::grpc::Status GetVec(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest& request, ::vectordb_rpc::GetVecReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::GetVecReply>> AsyncGetVec(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::GetVecReply>>(AsyncGetVecRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::GetVecReply>> PrepareAsyncGetVec(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::GetVecReply>>(PrepareAsyncGetVecRaw(context, request, cq));
    }
    virtual ::grpc::Status DistKey(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest& request, ::vectordb_rpc::DistKeyReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::DistKeyReply>> AsyncDistKey(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::DistKeyReply>>(AsyncDistKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::DistKeyReply>> PrepareAsyncDistKey(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::DistKeyReply>>(PrepareAsyncDistKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status Keys(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest& request, ::vectordb_rpc::KeysReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::KeysReply>> AsyncKeys(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::KeysReply>>(AsyncKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::KeysReply>> PrepareAsyncKeys(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::KeysReply>>(PrepareAsyncKeysRaw(context, request, cq));
    }
    virtual ::grpc::Status BuildIndex(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest& request, ::vectordb_rpc::BuildIndexReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::BuildIndexReply>> AsyncBuildIndex(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::BuildIndexReply>>(AsyncBuildIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::BuildIndexReply>> PrepareAsyncBuildIndex(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::BuildIndexReply>>(PrepareAsyncBuildIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status GetKNN(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest& request, ::vectordb_rpc::GetKNNReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::GetKNNReply>> AsyncGetKNN(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::GetKNNReply>>(AsyncGetKNNRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::GetKNNReply>> PrepareAsyncGetKNN(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::GetKNNReply>>(PrepareAsyncGetKNNRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Ping(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest* request, ::vectordb_rpc::PingReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::PingReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest* request, ::vectordb_rpc::PingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::PingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Info(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest* request, ::vectordb_rpc::InfoReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Info(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::InfoReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Info(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest* request, ::vectordb_rpc::InfoReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Info(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::InfoReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateTable(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest* request, ::vectordb_rpc::CreateTableReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::CreateTableReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateTable(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest* request, ::vectordb_rpc::CreateTableReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::CreateTableReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ShowTables(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest* request, ::vectordb_rpc::ShowTablesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShowTables(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::ShowTablesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShowTables(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest* request, ::vectordb_rpc::ShowTablesReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ShowTables(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::ShowTablesReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Describe(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest* request, ::vectordb_rpc::DescribeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Describe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::DescribeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Describe(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest* request, ::vectordb_rpc::DescribeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Describe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::DescribeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void PutVec(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest* request, ::vectordb_rpc::PutVecReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutVec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::PutVecReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutVec(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest* request, ::vectordb_rpc::PutVecReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void PutVec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::PutVecReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetVec(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest* request, ::vectordb_rpc::GetVecReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetVec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::GetVecReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetVec(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest* request, ::vectordb_rpc::GetVecReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetVec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::GetVecReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DistKey(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest* request, ::vectordb_rpc::DistKeyReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DistKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::DistKeyReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DistKey(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest* request, ::vectordb_rpc::DistKeyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DistKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::DistKeyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Keys(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest* request, ::vectordb_rpc::KeysReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Keys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::KeysReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Keys(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest* request, ::vectordb_rpc::KeysReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Keys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::KeysReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void BuildIndex(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest* request, ::vectordb_rpc::BuildIndexReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BuildIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::BuildIndexReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BuildIndex(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest* request, ::vectordb_rpc::BuildIndexReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void BuildIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::BuildIndexReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetKNN(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest* request, ::vectordb_rpc::GetKNNReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetKNN(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::GetKNNReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetKNN(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest* request, ::vectordb_rpc::GetKNNReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetKNN(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::GetKNNReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::PingReply>* AsyncPingRaw(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::PingReply>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::InfoReply>* AsyncInfoRaw(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::InfoReply>* PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::CreateTableReply>* AsyncCreateTableRaw(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::CreateTableReply>* PrepareAsyncCreateTableRaw(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::ShowTablesReply>* AsyncShowTablesRaw(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::ShowTablesReply>* PrepareAsyncShowTablesRaw(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::DescribeReply>* AsyncDescribeRaw(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::DescribeReply>* PrepareAsyncDescribeRaw(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::PutVecReply>* AsyncPutVecRaw(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::PutVecReply>* PrepareAsyncPutVecRaw(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::GetVecReply>* AsyncGetVecRaw(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::GetVecReply>* PrepareAsyncGetVecRaw(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::DistKeyReply>* AsyncDistKeyRaw(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::DistKeyReply>* PrepareAsyncDistKeyRaw(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::KeysReply>* AsyncKeysRaw(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::KeysReply>* PrepareAsyncKeysRaw(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::BuildIndexReply>* AsyncBuildIndexRaw(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::BuildIndexReply>* PrepareAsyncBuildIndexRaw(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::GetKNNReply>* AsyncGetKNNRaw(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vectordb_rpc::GetKNNReply>* PrepareAsyncGetKNNRaw(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest& request, ::vectordb_rpc::PingReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::PingReply>> AsyncPing(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::PingReply>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::PingReply>> PrepareAsyncPing(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::PingReply>>(PrepareAsyncPingRaw(context, request, cq));
    }
    ::grpc::Status Info(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest& request, ::vectordb_rpc::InfoReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::InfoReply>> AsyncInfo(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::InfoReply>>(AsyncInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::InfoReply>> PrepareAsyncInfo(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::InfoReply>>(PrepareAsyncInfoRaw(context, request, cq));
    }
    ::grpc::Status CreateTable(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest& request, ::vectordb_rpc::CreateTableReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::CreateTableReply>> AsyncCreateTable(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::CreateTableReply>>(AsyncCreateTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::CreateTableReply>> PrepareAsyncCreateTable(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::CreateTableReply>>(PrepareAsyncCreateTableRaw(context, request, cq));
    }
    ::grpc::Status ShowTables(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest& request, ::vectordb_rpc::ShowTablesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::ShowTablesReply>> AsyncShowTables(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::ShowTablesReply>>(AsyncShowTablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::ShowTablesReply>> PrepareAsyncShowTables(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::ShowTablesReply>>(PrepareAsyncShowTablesRaw(context, request, cq));
    }
    ::grpc::Status Describe(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest& request, ::vectordb_rpc::DescribeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::DescribeReply>> AsyncDescribe(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::DescribeReply>>(AsyncDescribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::DescribeReply>> PrepareAsyncDescribe(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::DescribeReply>>(PrepareAsyncDescribeRaw(context, request, cq));
    }
    ::grpc::Status PutVec(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest& request, ::vectordb_rpc::PutVecReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::PutVecReply>> AsyncPutVec(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::PutVecReply>>(AsyncPutVecRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::PutVecReply>> PrepareAsyncPutVec(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::PutVecReply>>(PrepareAsyncPutVecRaw(context, request, cq));
    }
    ::grpc::Status GetVec(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest& request, ::vectordb_rpc::GetVecReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::GetVecReply>> AsyncGetVec(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::GetVecReply>>(AsyncGetVecRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::GetVecReply>> PrepareAsyncGetVec(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::GetVecReply>>(PrepareAsyncGetVecRaw(context, request, cq));
    }
    ::grpc::Status DistKey(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest& request, ::vectordb_rpc::DistKeyReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::DistKeyReply>> AsyncDistKey(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::DistKeyReply>>(AsyncDistKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::DistKeyReply>> PrepareAsyncDistKey(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::DistKeyReply>>(PrepareAsyncDistKeyRaw(context, request, cq));
    }
    ::grpc::Status Keys(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest& request, ::vectordb_rpc::KeysReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::KeysReply>> AsyncKeys(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::KeysReply>>(AsyncKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::KeysReply>> PrepareAsyncKeys(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::KeysReply>>(PrepareAsyncKeysRaw(context, request, cq));
    }
    ::grpc::Status BuildIndex(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest& request, ::vectordb_rpc::BuildIndexReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::BuildIndexReply>> AsyncBuildIndex(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::BuildIndexReply>>(AsyncBuildIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::BuildIndexReply>> PrepareAsyncBuildIndex(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::BuildIndexReply>>(PrepareAsyncBuildIndexRaw(context, request, cq));
    }
    ::grpc::Status GetKNN(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest& request, ::vectordb_rpc::GetKNNReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::GetKNNReply>> AsyncGetKNN(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::GetKNNReply>>(AsyncGetKNNRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::GetKNNReply>> PrepareAsyncGetKNN(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::GetKNNReply>>(PrepareAsyncGetKNNRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Ping(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest* request, ::vectordb_rpc::PingReply* response, std::function<void(::grpc::Status)>) override;
      void Ping(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::PingReply* response, std::function<void(::grpc::Status)>) override;
      void Ping(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest* request, ::vectordb_rpc::PingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Ping(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::PingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Info(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest* request, ::vectordb_rpc::InfoReply* response, std::function<void(::grpc::Status)>) override;
      void Info(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::InfoReply* response, std::function<void(::grpc::Status)>) override;
      void Info(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest* request, ::vectordb_rpc::InfoReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Info(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::InfoReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateTable(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest* request, ::vectordb_rpc::CreateTableReply* response, std::function<void(::grpc::Status)>) override;
      void CreateTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::CreateTableReply* response, std::function<void(::grpc::Status)>) override;
      void CreateTable(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest* request, ::vectordb_rpc::CreateTableReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::CreateTableReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ShowTables(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest* request, ::vectordb_rpc::ShowTablesReply* response, std::function<void(::grpc::Status)>) override;
      void ShowTables(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::ShowTablesReply* response, std::function<void(::grpc::Status)>) override;
      void ShowTables(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest* request, ::vectordb_rpc::ShowTablesReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ShowTables(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::ShowTablesReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Describe(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest* request, ::vectordb_rpc::DescribeReply* response, std::function<void(::grpc::Status)>) override;
      void Describe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::DescribeReply* response, std::function<void(::grpc::Status)>) override;
      void Describe(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest* request, ::vectordb_rpc::DescribeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Describe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::DescribeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void PutVec(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest* request, ::vectordb_rpc::PutVecReply* response, std::function<void(::grpc::Status)>) override;
      void PutVec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::PutVecReply* response, std::function<void(::grpc::Status)>) override;
      void PutVec(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest* request, ::vectordb_rpc::PutVecReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void PutVec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::PutVecReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetVec(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest* request, ::vectordb_rpc::GetVecReply* response, std::function<void(::grpc::Status)>) override;
      void GetVec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::GetVecReply* response, std::function<void(::grpc::Status)>) override;
      void GetVec(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest* request, ::vectordb_rpc::GetVecReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetVec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::GetVecReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DistKey(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest* request, ::vectordb_rpc::DistKeyReply* response, std::function<void(::grpc::Status)>) override;
      void DistKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::DistKeyReply* response, std::function<void(::grpc::Status)>) override;
      void DistKey(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest* request, ::vectordb_rpc::DistKeyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DistKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::DistKeyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Keys(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest* request, ::vectordb_rpc::KeysReply* response, std::function<void(::grpc::Status)>) override;
      void Keys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::KeysReply* response, std::function<void(::grpc::Status)>) override;
      void Keys(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest* request, ::vectordb_rpc::KeysReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Keys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::KeysReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void BuildIndex(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest* request, ::vectordb_rpc::BuildIndexReply* response, std::function<void(::grpc::Status)>) override;
      void BuildIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::BuildIndexReply* response, std::function<void(::grpc::Status)>) override;
      void BuildIndex(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest* request, ::vectordb_rpc::BuildIndexReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void BuildIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::BuildIndexReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetKNN(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest* request, ::vectordb_rpc::GetKNNReply* response, std::function<void(::grpc::Status)>) override;
      void GetKNN(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::GetKNNReply* response, std::function<void(::grpc::Status)>) override;
      void GetKNN(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest* request, ::vectordb_rpc::GetKNNReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetKNN(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::GetKNNReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::PingReply>* AsyncPingRaw(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::PingReply>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::InfoReply>* AsyncInfoRaw(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::InfoReply>* PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::CreateTableReply>* AsyncCreateTableRaw(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::CreateTableReply>* PrepareAsyncCreateTableRaw(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::ShowTablesReply>* AsyncShowTablesRaw(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::ShowTablesReply>* PrepareAsyncShowTablesRaw(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::DescribeReply>* AsyncDescribeRaw(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::DescribeReply>* PrepareAsyncDescribeRaw(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::PutVecReply>* AsyncPutVecRaw(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::PutVecReply>* PrepareAsyncPutVecRaw(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::GetVecReply>* AsyncGetVecRaw(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::GetVecReply>* PrepareAsyncGetVecRaw(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::DistKeyReply>* AsyncDistKeyRaw(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::DistKeyReply>* PrepareAsyncDistKeyRaw(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::KeysReply>* AsyncKeysRaw(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::KeysReply>* PrepareAsyncKeysRaw(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::BuildIndexReply>* AsyncBuildIndexRaw(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::BuildIndexReply>* PrepareAsyncBuildIndexRaw(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::GetKNNReply>* AsyncGetKNNRaw(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vectordb_rpc::GetKNNReply>* PrepareAsyncGetKNNRaw(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
    const ::grpc::internal::RpcMethod rpcmethod_Info_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTable_;
    const ::grpc::internal::RpcMethod rpcmethod_ShowTables_;
    const ::grpc::internal::RpcMethod rpcmethod_Describe_;
    const ::grpc::internal::RpcMethod rpcmethod_PutVec_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVec_;
    const ::grpc::internal::RpcMethod rpcmethod_DistKey_;
    const ::grpc::internal::RpcMethod rpcmethod_Keys_;
    const ::grpc::internal::RpcMethod rpcmethod_BuildIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_GetKNN_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::vectordb_rpc::PingRequest* request, ::vectordb_rpc::PingReply* response);
    virtual ::grpc::Status Info(::grpc::ServerContext* context, const ::vectordb_rpc::InfoRequest* request, ::vectordb_rpc::InfoReply* response);
    virtual ::grpc::Status CreateTable(::grpc::ServerContext* context, const ::vectordb_rpc::CreateTableRequest* request, ::vectordb_rpc::CreateTableReply* response);
    virtual ::grpc::Status ShowTables(::grpc::ServerContext* context, const ::vectordb_rpc::ShowTablesRequest* request, ::vectordb_rpc::ShowTablesReply* response);
    virtual ::grpc::Status Describe(::grpc::ServerContext* context, const ::vectordb_rpc::DescribeRequest* request, ::vectordb_rpc::DescribeReply* response);
    virtual ::grpc::Status PutVec(::grpc::ServerContext* context, const ::vectordb_rpc::PutVecRequest* request, ::vectordb_rpc::PutVecReply* response);
    virtual ::grpc::Status GetVec(::grpc::ServerContext* context, const ::vectordb_rpc::GetVecRequest* request, ::vectordb_rpc::GetVecReply* response);
    virtual ::grpc::Status DistKey(::grpc::ServerContext* context, const ::vectordb_rpc::DistKeyRequest* request, ::vectordb_rpc::DistKeyReply* response);
    virtual ::grpc::Status Keys(::grpc::ServerContext* context, const ::vectordb_rpc::KeysRequest* request, ::vectordb_rpc::KeysReply* response);
    virtual ::grpc::Status BuildIndex(::grpc::ServerContext* context, const ::vectordb_rpc::BuildIndexRequest* request, ::vectordb_rpc::BuildIndexReply* response);
    virtual ::grpc::Status GetKNN(::grpc::ServerContext* context, const ::vectordb_rpc::GetKNNRequest* request, ::vectordb_rpc::GetKNNReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::PingRequest* /*request*/, ::vectordb_rpc::PingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::vectordb_rpc::PingRequest* request, ::grpc::ServerAsyncResponseWriter< ::vectordb_rpc::PingReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Info() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::InfoRequest* /*request*/, ::vectordb_rpc::InfoReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfo(::grpc::ServerContext* context, ::vectordb_rpc::InfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::vectordb_rpc::InfoReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateTable() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::CreateTableRequest* /*request*/, ::vectordb_rpc::CreateTableReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTable(::grpc::ServerContext* context, ::vectordb_rpc::CreateTableRequest* request, ::grpc::ServerAsyncResponseWriter< ::vectordb_rpc::CreateTableReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShowTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShowTables() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ShowTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowTables(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::ShowTablesRequest* /*request*/, ::vectordb_rpc::ShowTablesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShowTables(::grpc::ServerContext* context, ::vectordb_rpc::ShowTablesRequest* request, ::grpc::ServerAsyncResponseWriter< ::vectordb_rpc::ShowTablesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Describe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Describe() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Describe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Describe(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::DescribeRequest* /*request*/, ::vectordb_rpc::DescribeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDescribe(::grpc::ServerContext* context, ::vectordb_rpc::DescribeRequest* request, ::grpc::ServerAsyncResponseWriter< ::vectordb_rpc::DescribeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutVec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutVec() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_PutVec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutVec(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::PutVecRequest* /*request*/, ::vectordb_rpc::PutVecReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutVec(::grpc::ServerContext* context, ::vectordb_rpc::PutVecRequest* request, ::grpc::ServerAsyncResponseWriter< ::vectordb_rpc::PutVecReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetVec() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetVec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVec(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::GetVecRequest* /*request*/, ::vectordb_rpc::GetVecReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVec(::grpc::ServerContext* context, ::vectordb_rpc::GetVecRequest* request, ::grpc::ServerAsyncResponseWriter< ::vectordb_rpc::GetVecReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DistKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DistKey() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DistKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DistKey(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::DistKeyRequest* /*request*/, ::vectordb_rpc::DistKeyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDistKey(::grpc::ServerContext* context, ::vectordb_rpc::DistKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::vectordb_rpc::DistKeyReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Keys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Keys() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Keys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Keys(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::KeysRequest* /*request*/, ::vectordb_rpc::KeysReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKeys(::grpc::ServerContext* context, ::vectordb_rpc::KeysRequest* request, ::grpc::ServerAsyncResponseWriter< ::vectordb_rpc::KeysReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BuildIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BuildIndex() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_BuildIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuildIndex(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::BuildIndexRequest* /*request*/, ::vectordb_rpc::BuildIndexReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBuildIndex(::grpc::ServerContext* context, ::vectordb_rpc::BuildIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::vectordb_rpc::BuildIndexReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetKNN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetKNN() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetKNN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKNN(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::GetKNNRequest* /*request*/, ::vectordb_rpc::GetKNNReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKNN(::grpc::ServerContext* context, ::vectordb_rpc::GetKNNRequest* request, ::grpc::ServerAsyncResponseWriter< ::vectordb_rpc::GetKNNReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Ping<WithAsyncMethod_Info<WithAsyncMethod_CreateTable<WithAsyncMethod_ShowTables<WithAsyncMethod_Describe<WithAsyncMethod_PutVec<WithAsyncMethod_GetVec<WithAsyncMethod_DistKey<WithAsyncMethod_Keys<WithAsyncMethod_BuildIndex<WithAsyncMethod_GetKNN<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Ping() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::PingRequest, ::vectordb_rpc::PingReply>(
          [this](::grpc::ServerContext* context,
                 const ::vectordb_rpc::PingRequest* request,
                 ::vectordb_rpc::PingReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Ping(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Ping(
        ::grpc::experimental::MessageAllocator< ::vectordb_rpc::PingRequest, ::vectordb_rpc::PingReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::PingRequest, ::vectordb_rpc::PingReply>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::PingRequest* /*request*/, ::vectordb_rpc::PingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Ping(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::PingRequest* /*request*/, ::vectordb_rpc::PingReply* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Info() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::InfoRequest, ::vectordb_rpc::InfoReply>(
          [this](::grpc::ServerContext* context,
                 const ::vectordb_rpc::InfoRequest* request,
                 ::vectordb_rpc::InfoReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Info(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Info(
        ::grpc::experimental::MessageAllocator< ::vectordb_rpc::InfoRequest, ::vectordb_rpc::InfoReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::InfoRequest, ::vectordb_rpc::InfoReply>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::InfoRequest* /*request*/, ::vectordb_rpc::InfoReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Info(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::InfoRequest* /*request*/, ::vectordb_rpc::InfoReply* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateTable() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::CreateTableRequest, ::vectordb_rpc::CreateTableReply>(
          [this](::grpc::ServerContext* context,
                 const ::vectordb_rpc::CreateTableRequest* request,
                 ::vectordb_rpc::CreateTableReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateTable(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateTable(
        ::grpc::experimental::MessageAllocator< ::vectordb_rpc::CreateTableRequest, ::vectordb_rpc::CreateTableReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::CreateTableRequest, ::vectordb_rpc::CreateTableReply>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::CreateTableRequest* /*request*/, ::vectordb_rpc::CreateTableReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateTable(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::CreateTableRequest* /*request*/, ::vectordb_rpc::CreateTableReply* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ShowTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ShowTables() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::ShowTablesRequest, ::vectordb_rpc::ShowTablesReply>(
          [this](::grpc::ServerContext* context,
                 const ::vectordb_rpc::ShowTablesRequest* request,
                 ::vectordb_rpc::ShowTablesReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ShowTables(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ShowTables(
        ::grpc::experimental::MessageAllocator< ::vectordb_rpc::ShowTablesRequest, ::vectordb_rpc::ShowTablesReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::ShowTablesRequest, ::vectordb_rpc::ShowTablesReply>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ShowTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowTables(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::ShowTablesRequest* /*request*/, ::vectordb_rpc::ShowTablesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ShowTables(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::ShowTablesRequest* /*request*/, ::vectordb_rpc::ShowTablesReply* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Describe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Describe() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::DescribeRequest, ::vectordb_rpc::DescribeReply>(
          [this](::grpc::ServerContext* context,
                 const ::vectordb_rpc::DescribeRequest* request,
                 ::vectordb_rpc::DescribeReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Describe(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Describe(
        ::grpc::experimental::MessageAllocator< ::vectordb_rpc::DescribeRequest, ::vectordb_rpc::DescribeReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::DescribeRequest, ::vectordb_rpc::DescribeReply>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Describe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Describe(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::DescribeRequest* /*request*/, ::vectordb_rpc::DescribeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Describe(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::DescribeRequest* /*request*/, ::vectordb_rpc::DescribeReply* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PutVec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PutVec() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::PutVecRequest, ::vectordb_rpc::PutVecReply>(
          [this](::grpc::ServerContext* context,
                 const ::vectordb_rpc::PutVecRequest* request,
                 ::vectordb_rpc::PutVecReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PutVec(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_PutVec(
        ::grpc::experimental::MessageAllocator< ::vectordb_rpc::PutVecRequest, ::vectordb_rpc::PutVecReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::PutVecRequest, ::vectordb_rpc::PutVecReply>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PutVec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutVec(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::PutVecRequest* /*request*/, ::vectordb_rpc::PutVecReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PutVec(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::PutVecRequest* /*request*/, ::vectordb_rpc::PutVecReply* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetVec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetVec() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::GetVecRequest, ::vectordb_rpc::GetVecReply>(
          [this](::grpc::ServerContext* context,
                 const ::vectordb_rpc::GetVecRequest* request,
                 ::vectordb_rpc::GetVecReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetVec(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetVec(
        ::grpc::experimental::MessageAllocator< ::vectordb_rpc::GetVecRequest, ::vectordb_rpc::GetVecReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::GetVecRequest, ::vectordb_rpc::GetVecReply>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetVec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVec(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::GetVecRequest* /*request*/, ::vectordb_rpc::GetVecReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetVec(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::GetVecRequest* /*request*/, ::vectordb_rpc::GetVecReply* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DistKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DistKey() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::DistKeyRequest, ::vectordb_rpc::DistKeyReply>(
          [this](::grpc::ServerContext* context,
                 const ::vectordb_rpc::DistKeyRequest* request,
                 ::vectordb_rpc::DistKeyReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DistKey(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DistKey(
        ::grpc::experimental::MessageAllocator< ::vectordb_rpc::DistKeyRequest, ::vectordb_rpc::DistKeyReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::DistKeyRequest, ::vectordb_rpc::DistKeyReply>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DistKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DistKey(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::DistKeyRequest* /*request*/, ::vectordb_rpc::DistKeyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DistKey(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::DistKeyRequest* /*request*/, ::vectordb_rpc::DistKeyReply* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Keys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Keys() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::KeysRequest, ::vectordb_rpc::KeysReply>(
          [this](::grpc::ServerContext* context,
                 const ::vectordb_rpc::KeysRequest* request,
                 ::vectordb_rpc::KeysReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Keys(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Keys(
        ::grpc::experimental::MessageAllocator< ::vectordb_rpc::KeysRequest, ::vectordb_rpc::KeysReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::KeysRequest, ::vectordb_rpc::KeysReply>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Keys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Keys(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::KeysRequest* /*request*/, ::vectordb_rpc::KeysReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Keys(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::KeysRequest* /*request*/, ::vectordb_rpc::KeysReply* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BuildIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_BuildIndex() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::BuildIndexRequest, ::vectordb_rpc::BuildIndexReply>(
          [this](::grpc::ServerContext* context,
                 const ::vectordb_rpc::BuildIndexRequest* request,
                 ::vectordb_rpc::BuildIndexReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->BuildIndex(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_BuildIndex(
        ::grpc::experimental::MessageAllocator< ::vectordb_rpc::BuildIndexRequest, ::vectordb_rpc::BuildIndexReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::BuildIndexRequest, ::vectordb_rpc::BuildIndexReply>*>(
          ::grpc::Service::experimental().GetHandler(9))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_BuildIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuildIndex(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::BuildIndexRequest* /*request*/, ::vectordb_rpc::BuildIndexReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void BuildIndex(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::BuildIndexRequest* /*request*/, ::vectordb_rpc::BuildIndexReply* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetKNN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetKNN() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::GetKNNRequest, ::vectordb_rpc::GetKNNReply>(
          [this](::grpc::ServerContext* context,
                 const ::vectordb_rpc::GetKNNRequest* request,
                 ::vectordb_rpc::GetKNNReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetKNN(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetKNN(
        ::grpc::experimental::MessageAllocator< ::vectordb_rpc::GetKNNRequest, ::vectordb_rpc::GetKNNReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vectordb_rpc::GetKNNRequest, ::vectordb_rpc::GetKNNReply>*>(
          ::grpc::Service::experimental().GetHandler(10))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetKNN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKNN(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::GetKNNRequest* /*request*/, ::vectordb_rpc::GetKNNReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetKNN(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::GetKNNRequest* /*request*/, ::vectordb_rpc::GetKNNReply* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Ping<ExperimentalWithCallbackMethod_Info<ExperimentalWithCallbackMethod_CreateTable<ExperimentalWithCallbackMethod_ShowTables<ExperimentalWithCallbackMethod_Describe<ExperimentalWithCallbackMethod_PutVec<ExperimentalWithCallbackMethod_GetVec<ExperimentalWithCallbackMethod_DistKey<ExperimentalWithCallbackMethod_Keys<ExperimentalWithCallbackMethod_BuildIndex<ExperimentalWithCallbackMethod_GetKNN<Service > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::PingRequest* /*request*/, ::vectordb_rpc::PingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Info() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::InfoRequest* /*request*/, ::vectordb_rpc::InfoReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateTable() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::CreateTableRequest* /*request*/, ::vectordb_rpc::CreateTableReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShowTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShowTables() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ShowTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowTables(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::ShowTablesRequest* /*request*/, ::vectordb_rpc::ShowTablesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Describe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Describe() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Describe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Describe(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::DescribeRequest* /*request*/, ::vectordb_rpc::DescribeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutVec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutVec() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_PutVec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutVec(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::PutVecRequest* /*request*/, ::vectordb_rpc::PutVecReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetVec() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetVec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVec(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::GetVecRequest* /*request*/, ::vectordb_rpc::GetVecReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DistKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DistKey() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DistKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DistKey(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::DistKeyRequest* /*request*/, ::vectordb_rpc::DistKeyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Keys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Keys() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Keys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Keys(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::KeysRequest* /*request*/, ::vectordb_rpc::KeysReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BuildIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BuildIndex() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_BuildIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuildIndex(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::BuildIndexRequest* /*request*/, ::vectordb_rpc::BuildIndexReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetKNN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetKNN() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetKNN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKNN(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::GetKNNRequest* /*request*/, ::vectordb_rpc::GetKNNReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::PingRequest* /*request*/, ::vectordb_rpc::PingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Info() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::InfoRequest* /*request*/, ::vectordb_rpc::InfoReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateTable() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::CreateTableRequest* /*request*/, ::vectordb_rpc::CreateTableReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShowTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShowTables() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ShowTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowTables(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::ShowTablesRequest* /*request*/, ::vectordb_rpc::ShowTablesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShowTables(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Describe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Describe() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Describe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Describe(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::DescribeRequest* /*request*/, ::vectordb_rpc::DescribeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDescribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutVec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutVec() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_PutVec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutVec(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::PutVecRequest* /*request*/, ::vectordb_rpc::PutVecReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutVec(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetVec() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetVec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVec(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::GetVecRequest* /*request*/, ::vectordb_rpc::GetVecReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVec(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DistKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DistKey() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DistKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DistKey(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::DistKeyRequest* /*request*/, ::vectordb_rpc::DistKeyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDistKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Keys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Keys() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Keys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Keys(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::KeysRequest* /*request*/, ::vectordb_rpc::KeysReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKeys(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BuildIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BuildIndex() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_BuildIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuildIndex(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::BuildIndexRequest* /*request*/, ::vectordb_rpc::BuildIndexReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBuildIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetKNN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetKNN() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetKNN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKNN(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::GetKNNRequest* /*request*/, ::vectordb_rpc::GetKNNReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKNN(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Ping() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Ping(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::PingRequest* /*request*/, ::vectordb_rpc::PingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Ping(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Info() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Info(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::InfoRequest* /*request*/, ::vectordb_rpc::InfoReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Info(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateTable() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateTable(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::CreateTableRequest* /*request*/, ::vectordb_rpc::CreateTableReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateTable(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ShowTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ShowTables() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ShowTables(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ShowTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowTables(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::ShowTablesRequest* /*request*/, ::vectordb_rpc::ShowTablesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ShowTables(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Describe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Describe() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Describe(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Describe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Describe(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::DescribeRequest* /*request*/, ::vectordb_rpc::DescribeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Describe(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PutVec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PutVec() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PutVec(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PutVec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutVec(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::PutVecRequest* /*request*/, ::vectordb_rpc::PutVecReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PutVec(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetVec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetVec() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetVec(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetVec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVec(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::GetVecRequest* /*request*/, ::vectordb_rpc::GetVecReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetVec(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DistKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DistKey() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DistKey(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DistKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DistKey(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::DistKeyRequest* /*request*/, ::vectordb_rpc::DistKeyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DistKey(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Keys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Keys() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Keys(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Keys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Keys(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::KeysRequest* /*request*/, ::vectordb_rpc::KeysReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Keys(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BuildIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_BuildIndex() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->BuildIndex(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_BuildIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuildIndex(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::BuildIndexRequest* /*request*/, ::vectordb_rpc::BuildIndexReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void BuildIndex(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetKNN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetKNN() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetKNN(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetKNN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKNN(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::GetKNNRequest* /*request*/, ::vectordb_rpc::GetKNNReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetKNN(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::vectordb_rpc::PingRequest, ::vectordb_rpc::PingReply>(std::bind(&WithStreamedUnaryMethod_Ping<BaseClass>::StreamedPing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::PingRequest* /*request*/, ::vectordb_rpc::PingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vectordb_rpc::PingRequest,::vectordb_rpc::PingReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Info() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::vectordb_rpc::InfoRequest, ::vectordb_rpc::InfoReply>(std::bind(&WithStreamedUnaryMethod_Info<BaseClass>::StreamedInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::InfoRequest* /*request*/, ::vectordb_rpc::InfoReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vectordb_rpc::InfoRequest,::vectordb_rpc::InfoReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateTable() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::vectordb_rpc::CreateTableRequest, ::vectordb_rpc::CreateTableReply>(std::bind(&WithStreamedUnaryMethod_CreateTable<BaseClass>::StreamedCreateTable, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::CreateTableRequest* /*request*/, ::vectordb_rpc::CreateTableReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vectordb_rpc::CreateTableRequest,::vectordb_rpc::CreateTableReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShowTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShowTables() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::vectordb_rpc::ShowTablesRequest, ::vectordb_rpc::ShowTablesReply>(std::bind(&WithStreamedUnaryMethod_ShowTables<BaseClass>::StreamedShowTables, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ShowTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShowTables(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::ShowTablesRequest* /*request*/, ::vectordb_rpc::ShowTablesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShowTables(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vectordb_rpc::ShowTablesRequest,::vectordb_rpc::ShowTablesReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Describe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Describe() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::vectordb_rpc::DescribeRequest, ::vectordb_rpc::DescribeReply>(std::bind(&WithStreamedUnaryMethod_Describe<BaseClass>::StreamedDescribe, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Describe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Describe(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::DescribeRequest* /*request*/, ::vectordb_rpc::DescribeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDescribe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vectordb_rpc::DescribeRequest,::vectordb_rpc::DescribeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutVec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutVec() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::vectordb_rpc::PutVecRequest, ::vectordb_rpc::PutVecReply>(std::bind(&WithStreamedUnaryMethod_PutVec<BaseClass>::StreamedPutVec, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PutVec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutVec(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::PutVecRequest* /*request*/, ::vectordb_rpc::PutVecReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutVec(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vectordb_rpc::PutVecRequest,::vectordb_rpc::PutVecReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetVec() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::vectordb_rpc::GetVecRequest, ::vectordb_rpc::GetVecReply>(std::bind(&WithStreamedUnaryMethod_GetVec<BaseClass>::StreamedGetVec, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetVec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVec(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::GetVecRequest* /*request*/, ::vectordb_rpc::GetVecReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVec(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vectordb_rpc::GetVecRequest,::vectordb_rpc::GetVecReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DistKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DistKey() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::vectordb_rpc::DistKeyRequest, ::vectordb_rpc::DistKeyReply>(std::bind(&WithStreamedUnaryMethod_DistKey<BaseClass>::StreamedDistKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DistKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DistKey(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::DistKeyRequest* /*request*/, ::vectordb_rpc::DistKeyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDistKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vectordb_rpc::DistKeyRequest,::vectordb_rpc::DistKeyReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Keys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Keys() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::vectordb_rpc::KeysRequest, ::vectordb_rpc::KeysReply>(std::bind(&WithStreamedUnaryMethod_Keys<BaseClass>::StreamedKeys, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Keys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Keys(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::KeysRequest* /*request*/, ::vectordb_rpc::KeysReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKeys(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vectordb_rpc::KeysRequest,::vectordb_rpc::KeysReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BuildIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BuildIndex() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::vectordb_rpc::BuildIndexRequest, ::vectordb_rpc::BuildIndexReply>(std::bind(&WithStreamedUnaryMethod_BuildIndex<BaseClass>::StreamedBuildIndex, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BuildIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BuildIndex(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::BuildIndexRequest* /*request*/, ::vectordb_rpc::BuildIndexReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBuildIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vectordb_rpc::BuildIndexRequest,::vectordb_rpc::BuildIndexReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetKNN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetKNN() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::vectordb_rpc::GetKNNRequest, ::vectordb_rpc::GetKNNReply>(std::bind(&WithStreamedUnaryMethod_GetKNN<BaseClass>::StreamedGetKNN, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetKNN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetKNN(::grpc::ServerContext* /*context*/, const ::vectordb_rpc::GetKNNRequest* /*request*/, ::vectordb_rpc::GetKNNReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetKNN(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vectordb_rpc::GetKNNRequest,::vectordb_rpc::GetKNNReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_Info<WithStreamedUnaryMethod_CreateTable<WithStreamedUnaryMethod_ShowTables<WithStreamedUnaryMethod_Describe<WithStreamedUnaryMethod_PutVec<WithStreamedUnaryMethod_GetVec<WithStreamedUnaryMethod_DistKey<WithStreamedUnaryMethod_Keys<WithStreamedUnaryMethod_BuildIndex<WithStreamedUnaryMethod_GetKNN<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_Info<WithStreamedUnaryMethod_CreateTable<WithStreamedUnaryMethod_ShowTables<WithStreamedUnaryMethod_Describe<WithStreamedUnaryMethod_PutVec<WithStreamedUnaryMethod_GetVec<WithStreamedUnaryMethod_DistKey<WithStreamedUnaryMethod_Keys<WithStreamedUnaryMethod_BuildIndex<WithStreamedUnaryMethod_GetKNN<Service > > > > > > > > > > > StreamedService;
};

}  // namespace vectordb_rpc


#endif  // GRPC_vectordb_5frpc_2eproto__INCLUDED
