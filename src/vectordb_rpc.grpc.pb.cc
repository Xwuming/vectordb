// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vectordb_rpc.proto

#include "vectordb_rpc.pb.h"
#include "vectordb_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vectordb_rpc {

static const char* VectorDB_method_names[] = {
  "/vectordb_rpc.VectorDB/Ping",
  "/vectordb_rpc.VectorDB/Info",
  "/vectordb_rpc.VectorDB/CreateTable",
  "/vectordb_rpc.VectorDB/ShowTables",
  "/vectordb_rpc.VectorDB/Describe",
  "/vectordb_rpc.VectorDB/PutVec",
  "/vectordb_rpc.VectorDB/GetVec",
  "/vectordb_rpc.VectorDB/DistKey",
  "/vectordb_rpc.VectorDB/Keys",
  "/vectordb_rpc.VectorDB/BuildIndex",
  "/vectordb_rpc.VectorDB/GetKNN",
};

std::unique_ptr< VectorDB::Stub> VectorDB::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VectorDB::Stub> stub(new VectorDB::Stub(channel));
  return stub;
}

VectorDB::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Ping_(VectorDB_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Info_(VectorDB_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateTable_(VectorDB_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowTables_(VectorDB_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Describe_(VectorDB_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutVec_(VectorDB_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVec_(VectorDB_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DistKey_(VectorDB_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Keys_(VectorDB_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BuildIndex_(VectorDB_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetKNN_(VectorDB_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VectorDB::Stub::Ping(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest& request, ::vectordb_rpc::PingReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void VectorDB::Stub::experimental_async::Ping(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest* request, ::vectordb_rpc::PingReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::Ping(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::PingReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::Ping(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest* request, ::vectordb_rpc::PingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

void VectorDB::Stub::experimental_async::Ping(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::PingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::PingReply>* VectorDB::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::PingReply>::Create(channel_.get(), cq, rpcmethod_Ping_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::PingReply>* VectorDB::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::vectordb_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::PingReply>::Create(channel_.get(), cq, rpcmethod_Ping_, context, request, false);
}

::grpc::Status VectorDB::Stub::Info(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest& request, ::vectordb_rpc::InfoReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Info_, context, request, response);
}

void VectorDB::Stub::experimental_async::Info(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest* request, ::vectordb_rpc::InfoReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Info_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::Info(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::InfoReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Info_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::Info(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest* request, ::vectordb_rpc::InfoReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Info_, context, request, response, reactor);
}

void VectorDB::Stub::experimental_async::Info(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::InfoReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::InfoReply>* VectorDB::Stub::AsyncInfoRaw(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::InfoReply>::Create(channel_.get(), cq, rpcmethod_Info_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::InfoReply>* VectorDB::Stub::PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::vectordb_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::InfoReply>::Create(channel_.get(), cq, rpcmethod_Info_, context, request, false);
}

::grpc::Status VectorDB::Stub::CreateTable(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest& request, ::vectordb_rpc::CreateTableReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateTable_, context, request, response);
}

void VectorDB::Stub::experimental_async::CreateTable(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest* request, ::vectordb_rpc::CreateTableReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateTable_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::CreateTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::CreateTableReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateTable_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::CreateTable(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest* request, ::vectordb_rpc::CreateTableReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateTable_, context, request, response, reactor);
}

void VectorDB::Stub::experimental_async::CreateTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::CreateTableReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::CreateTableReply>* VectorDB::Stub::AsyncCreateTableRaw(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::CreateTableReply>::Create(channel_.get(), cq, rpcmethod_CreateTable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::CreateTableReply>* VectorDB::Stub::PrepareAsyncCreateTableRaw(::grpc::ClientContext* context, const ::vectordb_rpc::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::CreateTableReply>::Create(channel_.get(), cq, rpcmethod_CreateTable_, context, request, false);
}

::grpc::Status VectorDB::Stub::ShowTables(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest& request, ::vectordb_rpc::ShowTablesReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShowTables_, context, request, response);
}

void VectorDB::Stub::experimental_async::ShowTables(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest* request, ::vectordb_rpc::ShowTablesReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowTables_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::ShowTables(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::ShowTablesReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowTables_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::ShowTables(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest* request, ::vectordb_rpc::ShowTablesReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShowTables_, context, request, response, reactor);
}

void VectorDB::Stub::experimental_async::ShowTables(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::ShowTablesReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShowTables_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::ShowTablesReply>* VectorDB::Stub::AsyncShowTablesRaw(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::ShowTablesReply>::Create(channel_.get(), cq, rpcmethod_ShowTables_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::ShowTablesReply>* VectorDB::Stub::PrepareAsyncShowTablesRaw(::grpc::ClientContext* context, const ::vectordb_rpc::ShowTablesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::ShowTablesReply>::Create(channel_.get(), cq, rpcmethod_ShowTables_, context, request, false);
}

::grpc::Status VectorDB::Stub::Describe(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest& request, ::vectordb_rpc::DescribeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Describe_, context, request, response);
}

void VectorDB::Stub::experimental_async::Describe(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest* request, ::vectordb_rpc::DescribeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Describe_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::Describe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::DescribeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Describe_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::Describe(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest* request, ::vectordb_rpc::DescribeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Describe_, context, request, response, reactor);
}

void VectorDB::Stub::experimental_async::Describe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::DescribeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Describe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::DescribeReply>* VectorDB::Stub::AsyncDescribeRaw(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::DescribeReply>::Create(channel_.get(), cq, rpcmethod_Describe_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::DescribeReply>* VectorDB::Stub::PrepareAsyncDescribeRaw(::grpc::ClientContext* context, const ::vectordb_rpc::DescribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::DescribeReply>::Create(channel_.get(), cq, rpcmethod_Describe_, context, request, false);
}

::grpc::Status VectorDB::Stub::PutVec(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest& request, ::vectordb_rpc::PutVecReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PutVec_, context, request, response);
}

void VectorDB::Stub::experimental_async::PutVec(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest* request, ::vectordb_rpc::PutVecReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PutVec_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::PutVec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::PutVecReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PutVec_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::PutVec(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest* request, ::vectordb_rpc::PutVecReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PutVec_, context, request, response, reactor);
}

void VectorDB::Stub::experimental_async::PutVec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::PutVecReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PutVec_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::PutVecReply>* VectorDB::Stub::AsyncPutVecRaw(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::PutVecReply>::Create(channel_.get(), cq, rpcmethod_PutVec_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::PutVecReply>* VectorDB::Stub::PrepareAsyncPutVecRaw(::grpc::ClientContext* context, const ::vectordb_rpc::PutVecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::PutVecReply>::Create(channel_.get(), cq, rpcmethod_PutVec_, context, request, false);
}

::grpc::Status VectorDB::Stub::GetVec(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest& request, ::vectordb_rpc::GetVecReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVec_, context, request, response);
}

void VectorDB::Stub::experimental_async::GetVec(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest* request, ::vectordb_rpc::GetVecReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVec_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::GetVec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::GetVecReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVec_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::GetVec(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest* request, ::vectordb_rpc::GetVecReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVec_, context, request, response, reactor);
}

void VectorDB::Stub::experimental_async::GetVec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::GetVecReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVec_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::GetVecReply>* VectorDB::Stub::AsyncGetVecRaw(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::GetVecReply>::Create(channel_.get(), cq, rpcmethod_GetVec_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::GetVecReply>* VectorDB::Stub::PrepareAsyncGetVecRaw(::grpc::ClientContext* context, const ::vectordb_rpc::GetVecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::GetVecReply>::Create(channel_.get(), cq, rpcmethod_GetVec_, context, request, false);
}

::grpc::Status VectorDB::Stub::DistKey(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest& request, ::vectordb_rpc::DistKeyReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DistKey_, context, request, response);
}

void VectorDB::Stub::experimental_async::DistKey(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest* request, ::vectordb_rpc::DistKeyReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DistKey_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::DistKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::DistKeyReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DistKey_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::DistKey(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest* request, ::vectordb_rpc::DistKeyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DistKey_, context, request, response, reactor);
}

void VectorDB::Stub::experimental_async::DistKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::DistKeyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DistKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::DistKeyReply>* VectorDB::Stub::AsyncDistKeyRaw(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::DistKeyReply>::Create(channel_.get(), cq, rpcmethod_DistKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::DistKeyReply>* VectorDB::Stub::PrepareAsyncDistKeyRaw(::grpc::ClientContext* context, const ::vectordb_rpc::DistKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::DistKeyReply>::Create(channel_.get(), cq, rpcmethod_DistKey_, context, request, false);
}

::grpc::Status VectorDB::Stub::Keys(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest& request, ::vectordb_rpc::KeysReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Keys_, context, request, response);
}

void VectorDB::Stub::experimental_async::Keys(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest* request, ::vectordb_rpc::KeysReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Keys_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::Keys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::KeysReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Keys_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::Keys(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest* request, ::vectordb_rpc::KeysReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Keys_, context, request, response, reactor);
}

void VectorDB::Stub::experimental_async::Keys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::KeysReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Keys_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::KeysReply>* VectorDB::Stub::AsyncKeysRaw(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::KeysReply>::Create(channel_.get(), cq, rpcmethod_Keys_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::KeysReply>* VectorDB::Stub::PrepareAsyncKeysRaw(::grpc::ClientContext* context, const ::vectordb_rpc::KeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::KeysReply>::Create(channel_.get(), cq, rpcmethod_Keys_, context, request, false);
}

::grpc::Status VectorDB::Stub::BuildIndex(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest& request, ::vectordb_rpc::BuildIndexReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BuildIndex_, context, request, response);
}

void VectorDB::Stub::experimental_async::BuildIndex(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest* request, ::vectordb_rpc::BuildIndexReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BuildIndex_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::BuildIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::BuildIndexReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BuildIndex_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::BuildIndex(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest* request, ::vectordb_rpc::BuildIndexReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_BuildIndex_, context, request, response, reactor);
}

void VectorDB::Stub::experimental_async::BuildIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::BuildIndexReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_BuildIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::BuildIndexReply>* VectorDB::Stub::AsyncBuildIndexRaw(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::BuildIndexReply>::Create(channel_.get(), cq, rpcmethod_BuildIndex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::BuildIndexReply>* VectorDB::Stub::PrepareAsyncBuildIndexRaw(::grpc::ClientContext* context, const ::vectordb_rpc::BuildIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::BuildIndexReply>::Create(channel_.get(), cq, rpcmethod_BuildIndex_, context, request, false);
}

::grpc::Status VectorDB::Stub::GetKNN(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest& request, ::vectordb_rpc::GetKNNReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetKNN_, context, request, response);
}

void VectorDB::Stub::experimental_async::GetKNN(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest* request, ::vectordb_rpc::GetKNNReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetKNN_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::GetKNN(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::GetKNNReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetKNN_, context, request, response, std::move(f));
}

void VectorDB::Stub::experimental_async::GetKNN(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest* request, ::vectordb_rpc::GetKNNReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetKNN_, context, request, response, reactor);
}

void VectorDB::Stub::experimental_async::GetKNN(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vectordb_rpc::GetKNNReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetKNN_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::GetKNNReply>* VectorDB::Stub::AsyncGetKNNRaw(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::GetKNNReply>::Create(channel_.get(), cq, rpcmethod_GetKNN_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vectordb_rpc::GetKNNReply>* VectorDB::Stub::PrepareAsyncGetKNNRaw(::grpc::ClientContext* context, const ::vectordb_rpc::GetKNNRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vectordb_rpc::GetKNNReply>::Create(channel_.get(), cq, rpcmethod_GetKNN_, context, request, false);
}

VectorDB::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VectorDB_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VectorDB::Service, ::vectordb_rpc::PingRequest, ::vectordb_rpc::PingReply>(
          std::mem_fn(&VectorDB::Service::Ping), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VectorDB_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VectorDB::Service, ::vectordb_rpc::InfoRequest, ::vectordb_rpc::InfoReply>(
          std::mem_fn(&VectorDB::Service::Info), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VectorDB_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VectorDB::Service, ::vectordb_rpc::CreateTableRequest, ::vectordb_rpc::CreateTableReply>(
          std::mem_fn(&VectorDB::Service::CreateTable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VectorDB_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VectorDB::Service, ::vectordb_rpc::ShowTablesRequest, ::vectordb_rpc::ShowTablesReply>(
          std::mem_fn(&VectorDB::Service::ShowTables), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VectorDB_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VectorDB::Service, ::vectordb_rpc::DescribeRequest, ::vectordb_rpc::DescribeReply>(
          std::mem_fn(&VectorDB::Service::Describe), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VectorDB_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VectorDB::Service, ::vectordb_rpc::PutVecRequest, ::vectordb_rpc::PutVecReply>(
          std::mem_fn(&VectorDB::Service::PutVec), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VectorDB_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VectorDB::Service, ::vectordb_rpc::GetVecRequest, ::vectordb_rpc::GetVecReply>(
          std::mem_fn(&VectorDB::Service::GetVec), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VectorDB_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VectorDB::Service, ::vectordb_rpc::DistKeyRequest, ::vectordb_rpc::DistKeyReply>(
          std::mem_fn(&VectorDB::Service::DistKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VectorDB_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VectorDB::Service, ::vectordb_rpc::KeysRequest, ::vectordb_rpc::KeysReply>(
          std::mem_fn(&VectorDB::Service::Keys), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VectorDB_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VectorDB::Service, ::vectordb_rpc::BuildIndexRequest, ::vectordb_rpc::BuildIndexReply>(
          std::mem_fn(&VectorDB::Service::BuildIndex), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VectorDB_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VectorDB::Service, ::vectordb_rpc::GetKNNRequest, ::vectordb_rpc::GetKNNReply>(
          std::mem_fn(&VectorDB::Service::GetKNN), this)));
}

VectorDB::Service::~Service() {
}

::grpc::Status VectorDB::Service::Ping(::grpc::ServerContext* context, const ::vectordb_rpc::PingRequest* request, ::vectordb_rpc::PingReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VectorDB::Service::Info(::grpc::ServerContext* context, const ::vectordb_rpc::InfoRequest* request, ::vectordb_rpc::InfoReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VectorDB::Service::CreateTable(::grpc::ServerContext* context, const ::vectordb_rpc::CreateTableRequest* request, ::vectordb_rpc::CreateTableReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VectorDB::Service::ShowTables(::grpc::ServerContext* context, const ::vectordb_rpc::ShowTablesRequest* request, ::vectordb_rpc::ShowTablesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VectorDB::Service::Describe(::grpc::ServerContext* context, const ::vectordb_rpc::DescribeRequest* request, ::vectordb_rpc::DescribeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VectorDB::Service::PutVec(::grpc::ServerContext* context, const ::vectordb_rpc::PutVecRequest* request, ::vectordb_rpc::PutVecReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VectorDB::Service::GetVec(::grpc::ServerContext* context, const ::vectordb_rpc::GetVecRequest* request, ::vectordb_rpc::GetVecReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VectorDB::Service::DistKey(::grpc::ServerContext* context, const ::vectordb_rpc::DistKeyRequest* request, ::vectordb_rpc::DistKeyReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VectorDB::Service::Keys(::grpc::ServerContext* context, const ::vectordb_rpc::KeysRequest* request, ::vectordb_rpc::KeysReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VectorDB::Service::BuildIndex(::grpc::ServerContext* context, const ::vectordb_rpc::BuildIndexRequest* request, ::vectordb_rpc::BuildIndexReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VectorDB::Service::GetKNN(::grpc::ServerContext* context, const ::vectordb_rpc::GetKNNRequest* request, ::vectordb_rpc::GetKNNReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vectordb_rpc

